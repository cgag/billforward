package webhooks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new webhooks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for webhooks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateWebhook creates a webhook

{"nickname":"Add a new webhook","request":"createWebhookRequest.html","response":"createWebhookResponse.html"}
*/
func (a *Client) CreateWebhook(params *CreateWebhookParams) (*CreateWebhookOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateWebhookParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createWebhook",
		Method:             "POST",
		PathPattern:        "/webhooks",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateWebhookReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateWebhookOK), nil
}

/*
CreateWebhookV2 creates a webhook

{"nickname":"Add a new webhook","request":"createWebhookRequest.html","response":"createWebhookResponse.html"}
*/
func (a *Client) CreateWebhookV2(params *CreateWebhookV2Params) (*CreateWebhookV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateWebhookV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createWebhookV2",
		Method:             "POST",
		PathPattern:        "/webhooks/create",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateWebhookV2Reader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateWebhookV2OK), nil
}

/*
GetAllWebhooks returns a collection of webhooks specified by the account ID parameter by default 10 values are returned records are returned in natural order

{"nickname":"Get all webhooks","response":"getWebhookAll.html"}
*/
func (a *Client) GetAllWebhooks(params *GetAllWebhooksParams) (*GetAllWebhooksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllWebhooksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllWebhooks",
		Method:             "GET",
		PathPattern:        "/webhooks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllWebhooksReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllWebhooksOK), nil
}

/*
GetWebhookByID returns a single webhook specified by the webhook ID parameter

{"nickname":"Retrieve an existing webhook","response":"getWebhookByID.html"}
*/
func (a *Client) GetWebhookByID(params *GetWebhookByIDParams) (*GetWebhookByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWebhookByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWebhookByID",
		Method:             "GET",
		PathPattern:        "/webhooks/{webhook-ID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWebhookByIDReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWebhookByIDOK), nil
}

/*
RetireWebhook retires the specified webhook

{"nickname":"Remove a webhook","response":"deleteWebhook.html"}
*/
func (a *Client) RetireWebhook(params *RetireWebhookParams) (*RetireWebhookOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRetireWebhookParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "retireWebhook",
		Method:             "DELETE",
		PathPattern:        "/webhooks/{webhook-ID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RetireWebhookReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*RetireWebhookOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
