package tokenization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new tokenization API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for tokenization API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AuthCapture notes this API can be invoked more simply by our client side card capture library a href https github com billforward billforward js bill forward js a you should not need to interact with this API manually unless you have particularly bespoke requirements

{"nickname":"Authorized card capture","response":"BFJSAuthCapture.html","request":"BFJSAuthCapture.request.html"}
*/
func (a *Client) AuthCapture(params *AuthCaptureParams) (*AuthCaptureOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthCaptureParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "authCapture",
		Method:             "POST",
		PathPattern:        "/tokenization/auth-capture",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthCaptureReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*AuthCaptureOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
