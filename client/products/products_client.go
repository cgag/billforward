package products

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new products API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for products API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteMetadataForProduct removes any associated metadata

{"nickname":"Clear metadata from product","request" :"deleteProductMetadataRequest.html","response":"deleteProductMetadataResponse.html"}
*/
func (a *Client) DeleteMetadataForProduct(params *DeleteMetadataForProductParams) (*DeleteMetadataForProductOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMetadataForProductParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteMetadataForProduct",
		Method:             "DELETE",
		PathPattern:        "/products/{product-ID}/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMetadataForProductReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMetadataForProductOK), nil
}

/*
GetAllProducts returns a collection of products by default 10 values are returned records are returned in natural order

{"nickname":"Get all products","response":"getProductAll.html"}
*/
func (a *Client) GetAllProducts(params *GetAllProductsParams) (*GetAllProductsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllProductsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllProducts",
		Method:             "GET",
		PathPattern:        "/products",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllProductsReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllProductsOK), nil
}

/*
GetMetadataForProduct retrieves any associated metadata

{"nickname":"Retrieve metadata on product","request":"getProductMetadataRequest.html","response":"getProductMetadataResponse.html"}
*/
func (a *Client) GetMetadataForProduct(params *GetMetadataForProductParams) (*GetMetadataForProductOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMetadataForProductParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMetadataForProduct",
		Method:             "GET",
		PathPattern:        "/products/{product-ID}/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMetadataForProductReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMetadataForProductOK), nil
}

/*
GetProductByID returns a single product specified by the product ID parameter

{"nickname":"Retrieve an existing product","response":"getProductByID.html"}
*/
func (a *Client) GetProductByID(params *GetProductByIDParams) (*GetProductByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProductByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProductByID",
		Method:             "GET",
		PathPattern:        "/products/{product-ID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProductByIDReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProductByIDOK), nil
}

/*
SetMetadataForProduct removes any existing metadata keys and create the provided data

{"nickname":"Set metadata on product","request":"setProductMetadataRequest.html","response":"setProductMetadataResponse.html"}
*/
func (a *Client) SetMetadataForProduct(params *SetMetadataForProductParams) (*SetMetadataForProductOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetMetadataForProductParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setMetadataForProduct",
		Method:             "POST",
		PathPattern:        "/products/{product-ID}/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetMetadataForProductReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetMetadataForProductOK), nil
}

/*
UpsertMetadataForProduct updates any existing metadata key values and insert any new key values no keys will be removed

{"nickname":"Upsert metadata on product","request":"upsertProductMetadataRequest.html","response":"upsertProductMetadataResponse.html"}
*/
func (a *Client) UpsertMetadataForProduct(params *UpsertMetadataForProductParams) (*UpsertMetadataForProductOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpsertMetadataForProductParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "upsertMetadataForProduct",
		Method:             "PUT",
		PathPattern:        "/products/{product-ID}/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpsertMetadataForProductReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpsertMetadataForProductOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
