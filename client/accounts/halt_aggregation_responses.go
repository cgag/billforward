// Code generated by go-swagger; DO NOT EDIT.

package accounts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/authclub/billforward/models"
)

// HaltAggregationReader is a Reader for the HaltAggregation structure.
type HaltAggregationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *HaltAggregationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewHaltAggregationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		result := NewHaltAggregationDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewHaltAggregationOK creates a HaltAggregationOK with default headers values
func NewHaltAggregationOK() *HaltAggregationOK {
	return &HaltAggregationOK{}
}

/*HaltAggregationOK handles this case with default header values.

success
*/
type HaltAggregationOK struct {
	Payload *models.HaltAggregationResponse
}

func (o *HaltAggregationOK) Error() string {
	return fmt.Sprintf("[POST /accounts/{account-ID}/halt-aggregation][%d] haltAggregationOK  %+v", 200, o.Payload)
}

func (o *HaltAggregationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HaltAggregationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHaltAggregationDefault creates a HaltAggregationDefault with default headers values
func NewHaltAggregationDefault(code int) *HaltAggregationDefault {
	return &HaltAggregationDefault{
		_statusCode: code,
	}
}

/*HaltAggregationDefault handles this case with default header values.

error
*/
type HaltAggregationDefault struct {
	_statusCode int

	Payload *models.BFError
}

// Code gets the status code for the halt aggregation default response
func (o *HaltAggregationDefault) Code() int {
	return o._statusCode
}

func (o *HaltAggregationDefault) Error() string {
	return fmt.Sprintf("[POST /accounts/{account-ID}/halt-aggregation][%d] haltAggregation default  %+v", o._statusCode, o.Payload)
}

func (o *HaltAggregationDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BFError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*HaltAggregationBody halt aggregation body
swagger:model HaltAggregationBody
*/
type HaltAggregationBody struct {

	// id
	ID string `json:"id,omitempty"`
}

// MarshalBinary interface implementation
func (o *HaltAggregationBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *HaltAggregationBody) UnmarshalBinary(b []byte) error {
	var res HaltAggregationBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
