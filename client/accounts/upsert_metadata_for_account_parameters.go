package accounts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/authclub/billforward/models"
)

// NewUpsertMetadataForAccountParams creates a new UpsertMetadataForAccountParams object
// with the default values initialized.
func NewUpsertMetadataForAccountParams() *UpsertMetadataForAccountParams {
	var ()
	return &UpsertMetadataForAccountParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpsertMetadataForAccountParamsWithTimeout creates a new UpsertMetadataForAccountParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpsertMetadataForAccountParamsWithTimeout(timeout time.Duration) *UpsertMetadataForAccountParams {
	var ()
	return &UpsertMetadataForAccountParams{

		timeout: timeout,
	}
}

/*UpsertMetadataForAccountParams contains all the parameters to send to the API endpoint
for the upsert metadata for account operation typically these are written to a http.Request
*/
type UpsertMetadataForAccountParams struct {

	/*AccountID*/
	AccountID string
	/*Metadata*/
	Metadata models.DynamicMetadata
	/*Organizations
	  A list of organization-IDs used to restrict the scope of API calls.

	*/
	Organizations []string

	timeout time.Duration
}

// WithAccountID adds the accountID to the upsert metadata for account params
func (o *UpsertMetadataForAccountParams) WithAccountID(accountID string) *UpsertMetadataForAccountParams {
	o.AccountID = accountID
	return o
}

// WithMetadata adds the metadata to the upsert metadata for account params
func (o *UpsertMetadataForAccountParams) WithMetadata(metadata models.DynamicMetadata) *UpsertMetadataForAccountParams {
	o.Metadata = metadata
	return o
}

// WithOrganizations adds the organizations to the upsert metadata for account params
func (o *UpsertMetadataForAccountParams) WithOrganizations(organizations []string) *UpsertMetadataForAccountParams {
	o.Organizations = organizations
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *UpsertMetadataForAccountParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	// path param account-ID
	if err := r.SetPathParam("account-ID", o.AccountID); err != nil {
		return err
	}

	if err := r.SetBodyParam(o.Metadata); err != nil {
		return err
	}

	valuesOrganizations := o.Organizations

	joinedOrganizations := swag.JoinByFormat(valuesOrganizations, "multi")
	// query array param organizations
	if err := r.SetQueryParam("organizations", joinedOrganizations...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
