package invoices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetInvoiceAsPDFParams creates a new GetInvoiceAsPDFParams object
// with the default values initialized.
func NewGetInvoiceAsPDFParams() *GetInvoiceAsPDFParams {
	var (
		includeRetiredDefault            = bool(false)
		inclusiveEndDefault              = bool(false)
		offsetDefault                    = int32(0)
		orderDefault                     = string("DESC")
		orderByDefault                   = string("created")
		recordsDefault                   = int32(10)
		showPlanOnlyWhenAmbiguousDefault = bool(true)
		showZeroCostDefault              = bool(true)
		tierBreakdownDefault             = bool(false)
	)
	return &GetInvoiceAsPDFParams{
		IncludeRetired:            &includeRetiredDefault,
		InclusiveEnd:              &inclusiveEndDefault,
		Offset:                    &offsetDefault,
		Order:                     &orderDefault,
		OrderBy:                   &orderByDefault,
		Records:                   &recordsDefault,
		ShowPlanOnlyWhenAmbiguous: &showPlanOnlyWhenAmbiguousDefault,
		ShowZeroCost:              &showZeroCostDefault,
		TierBreakdown:             &tierBreakdownDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetInvoiceAsPDFParamsWithTimeout creates a new GetInvoiceAsPDFParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetInvoiceAsPDFParamsWithTimeout(timeout time.Duration) *GetInvoiceAsPDFParams {
	var (
		includeRetiredDefault            bool   = bool(false)
		inclusiveEndDefault              bool   = bool(false)
		offsetDefault                    int32  = int32(0)
		orderDefault                     string = string("DESC")
		orderByDefault                   string = string("created")
		recordsDefault                   int32  = int32(10)
		showPlanOnlyWhenAmbiguousDefault bool   = bool(true)
		showZeroCostDefault              bool   = bool(true)
		tierBreakdownDefault             bool   = bool(false)
	)
	return &GetInvoiceAsPDFParams{
		IncludeRetired:            &includeRetiredDefault,
		InclusiveEnd:              &inclusiveEndDefault,
		Offset:                    &offsetDefault,
		Order:                     &orderDefault,
		OrderBy:                   &orderByDefault,
		Records:                   &recordsDefault,
		ShowPlanOnlyWhenAmbiguous: &showPlanOnlyWhenAmbiguousDefault,
		ShowZeroCost:              &showZeroCostDefault,
		TierBreakdown:             &tierBreakdownDefault,

		timeout: timeout,
	}
}

/*GetInvoiceAsPDFParams contains all the parameters to send to the API endpoint
for the get invoice as p d f operation typically these are written to a http.Request
*/
type GetInvoiceAsPDFParams struct {

	/*ID
	  The ID of the invoice.

	*/
	ID string
	/*GroupLineItemsBy*/
	GroupLineItemsBy *string
	/*IncludeFooter*/
	IncludeFooter *bool
	/*IncludeRetired
	  Whether retired products should be returned.

	*/
	IncludeRetired *bool
	/*InclusiveEnd
	  Whether to present in the Invoice date range only those dates whose entirety are involved in the billing period. In other words: when true, this subtracts 1 from the "period end" date shown to the customer.

	*/
	InclusiveEnd *bool
	/*Offset
	  The offset from the first invoice to return.

	*/
	Offset *int32
	/*Order
	  Ihe direction of any ordering, either ASC or DESC.

	*/
	Order *string
	/*OrderBy
	  Specify a field used to order the result set.

	*/
	OrderBy *string
	/*Organizations
	  A list of organization-IDs used to restrict the scope of API calls.

	*/
	Organizations []string
	/*Records
	  The maximum number of invoices to return.

	*/
	Records *int32
	/*ShowPlanOnlyWhenAmbiguous
	  Whether to state which plan the Invoice lines came from, regardless of whether there's only one plan involved in this Invoice.

	*/
	ShowPlanOnlyWhenAmbiguous *bool
	/*ShowZeroCost
	  Whether to show zero-cost lines.

	*/
	ShowZeroCost *bool
	/*TierBreakdown
	  Whether to provide a breakdown of charge tiering.

	*/
	TierBreakdown *bool

	timeout time.Duration
}

// WithID adds the id to the get invoice as p d f params
func (o *GetInvoiceAsPDFParams) WithID(id string) *GetInvoiceAsPDFParams {
	o.ID = id
	return o
}

// WithGroupLineItemsBy adds the groupLineItemsBy to the get invoice as p d f params
func (o *GetInvoiceAsPDFParams) WithGroupLineItemsBy(groupLineItemsBy *string) *GetInvoiceAsPDFParams {
	o.GroupLineItemsBy = groupLineItemsBy
	return o
}

// WithIncludeFooter adds the includeFooter to the get invoice as p d f params
func (o *GetInvoiceAsPDFParams) WithIncludeFooter(includeFooter *bool) *GetInvoiceAsPDFParams {
	o.IncludeFooter = includeFooter
	return o
}

// WithIncludeRetired adds the includeRetired to the get invoice as p d f params
func (o *GetInvoiceAsPDFParams) WithIncludeRetired(includeRetired *bool) *GetInvoiceAsPDFParams {
	o.IncludeRetired = includeRetired
	return o
}

// WithInclusiveEnd adds the inclusiveEnd to the get invoice as p d f params
func (o *GetInvoiceAsPDFParams) WithInclusiveEnd(inclusiveEnd *bool) *GetInvoiceAsPDFParams {
	o.InclusiveEnd = inclusiveEnd
	return o
}

// WithOffset adds the offset to the get invoice as p d f params
func (o *GetInvoiceAsPDFParams) WithOffset(offset *int32) *GetInvoiceAsPDFParams {
	o.Offset = offset
	return o
}

// WithOrder adds the order to the get invoice as p d f params
func (o *GetInvoiceAsPDFParams) WithOrder(order *string) *GetInvoiceAsPDFParams {
	o.Order = order
	return o
}

// WithOrderBy adds the orderBy to the get invoice as p d f params
func (o *GetInvoiceAsPDFParams) WithOrderBy(orderBy *string) *GetInvoiceAsPDFParams {
	o.OrderBy = orderBy
	return o
}

// WithOrganizations adds the organizations to the get invoice as p d f params
func (o *GetInvoiceAsPDFParams) WithOrganizations(organizations []string) *GetInvoiceAsPDFParams {
	o.Organizations = organizations
	return o
}

// WithRecords adds the records to the get invoice as p d f params
func (o *GetInvoiceAsPDFParams) WithRecords(records *int32) *GetInvoiceAsPDFParams {
	o.Records = records
	return o
}

// WithShowPlanOnlyWhenAmbiguous adds the showPlanOnlyWhenAmbiguous to the get invoice as p d f params
func (o *GetInvoiceAsPDFParams) WithShowPlanOnlyWhenAmbiguous(showPlanOnlyWhenAmbiguous *bool) *GetInvoiceAsPDFParams {
	o.ShowPlanOnlyWhenAmbiguous = showPlanOnlyWhenAmbiguous
	return o
}

// WithShowZeroCost adds the showZeroCost to the get invoice as p d f params
func (o *GetInvoiceAsPDFParams) WithShowZeroCost(showZeroCost *bool) *GetInvoiceAsPDFParams {
	o.ShowZeroCost = showZeroCost
	return o
}

// WithTierBreakdown adds the tierBreakdown to the get invoice as p d f params
func (o *GetInvoiceAsPDFParams) WithTierBreakdown(tierBreakdown *bool) *GetInvoiceAsPDFParams {
	o.TierBreakdown = tierBreakdown
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetInvoiceAsPDFParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	// path param ID
	if err := r.SetPathParam("ID", o.ID); err != nil {
		return err
	}

	if o.GroupLineItemsBy != nil {

		// query param group_line_items_by
		var qrGroupLineItemsBy string
		if o.GroupLineItemsBy != nil {
			qrGroupLineItemsBy = *o.GroupLineItemsBy
		}
		qGroupLineItemsBy := qrGroupLineItemsBy
		if qGroupLineItemsBy != "" {
			if err := r.SetQueryParam("group_line_items_by", qGroupLineItemsBy); err != nil {
				return err
			}
		}

	}

	if o.IncludeFooter != nil {

		// query param include_footer
		var qrIncludeFooter bool
		if o.IncludeFooter != nil {
			qrIncludeFooter = *o.IncludeFooter
		}
		qIncludeFooter := swag.FormatBool(qrIncludeFooter)
		if qIncludeFooter != "" {
			if err := r.SetQueryParam("include_footer", qIncludeFooter); err != nil {
				return err
			}
		}

	}

	if o.IncludeRetired != nil {

		// query param include_retired
		var qrIncludeRetired bool
		if o.IncludeRetired != nil {
			qrIncludeRetired = *o.IncludeRetired
		}
		qIncludeRetired := swag.FormatBool(qrIncludeRetired)
		if qIncludeRetired != "" {
			if err := r.SetQueryParam("include_retired", qIncludeRetired); err != nil {
				return err
			}
		}

	}

	if o.InclusiveEnd != nil {

		// query param inclusive_end
		var qrInclusiveEnd bool
		if o.InclusiveEnd != nil {
			qrInclusiveEnd = *o.InclusiveEnd
		}
		qInclusiveEnd := swag.FormatBool(qrInclusiveEnd)
		if qInclusiveEnd != "" {
			if err := r.SetQueryParam("inclusive_end", qInclusiveEnd); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int32
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt32(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.Order != nil {

		// query param order
		var qrOrder string
		if o.Order != nil {
			qrOrder = *o.Order
		}
		qOrder := qrOrder
		if qOrder != "" {
			if err := r.SetQueryParam("order", qOrder); err != nil {
				return err
			}
		}

	}

	if o.OrderBy != nil {

		// query param order_by
		var qrOrderBy string
		if o.OrderBy != nil {
			qrOrderBy = *o.OrderBy
		}
		qOrderBy := qrOrderBy
		if qOrderBy != "" {
			if err := r.SetQueryParam("order_by", qOrderBy); err != nil {
				return err
			}
		}

	}

	valuesOrganizations := o.Organizations

	joinedOrganizations := swag.JoinByFormat(valuesOrganizations, "multi")
	// query array param organizations
	if err := r.SetQueryParam("organizations", joinedOrganizations...); err != nil {
		return err
	}

	if o.Records != nil {

		// query param records
		var qrRecords int32
		if o.Records != nil {
			qrRecords = *o.Records
		}
		qRecords := swag.FormatInt32(qrRecords)
		if qRecords != "" {
			if err := r.SetQueryParam("records", qRecords); err != nil {
				return err
			}
		}

	}

	if o.ShowPlanOnlyWhenAmbiguous != nil {

		// query param show_plan_only_when_ambiguous
		var qrShowPlanOnlyWhenAmbiguous bool
		if o.ShowPlanOnlyWhenAmbiguous != nil {
			qrShowPlanOnlyWhenAmbiguous = *o.ShowPlanOnlyWhenAmbiguous
		}
		qShowPlanOnlyWhenAmbiguous := swag.FormatBool(qrShowPlanOnlyWhenAmbiguous)
		if qShowPlanOnlyWhenAmbiguous != "" {
			if err := r.SetQueryParam("show_plan_only_when_ambiguous", qShowPlanOnlyWhenAmbiguous); err != nil {
				return err
			}
		}

	}

	if o.ShowZeroCost != nil {

		// query param show_zero_cost
		var qrShowZeroCost bool
		if o.ShowZeroCost != nil {
			qrShowZeroCost = *o.ShowZeroCost
		}
		qShowZeroCost := swag.FormatBool(qrShowZeroCost)
		if qShowZeroCost != "" {
			if err := r.SetQueryParam("show_zero_cost", qShowZeroCost); err != nil {
				return err
			}
		}

	}

	if o.TierBreakdown != nil {

		// query param tier_breakdown
		var qrTierBreakdown bool
		if o.TierBreakdown != nil {
			qrTierBreakdown = *o.TierBreakdown
		}
		qTierBreakdown := swag.FormatBool(qrTierBreakdown)
		if qTierBreakdown != "" {
			if err := r.SetQueryParam("tier_breakdown", qTierBreakdown); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
