// Code generated by go-swagger; DO NOT EDIT.

package product_rate_plans

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetProductRatePlanByIDParams creates a new GetProductRatePlanByIDParams object
// with the default values initialized.
func NewGetProductRatePlanByIDParams() *GetProductRatePlanByIDParams {
	var (
		includeRetiredDefault = bool(false)
		offsetDefault         = int32(0)
		orderDefault          = string("DESC")
		orderByDefault        = string("created")
		recordsDefault        = int32(10)
	)
	return &GetProductRatePlanByIDParams{
		IncludeRetired: &includeRetiredDefault,
		Offset:         &offsetDefault,
		Order:          &orderDefault,
		OrderBy:        &orderByDefault,
		Records:        &recordsDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetProductRatePlanByIDParamsWithTimeout creates a new GetProductRatePlanByIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetProductRatePlanByIDParamsWithTimeout(timeout time.Duration) *GetProductRatePlanByIDParams {
	var (
		includeRetiredDefault = bool(false)
		offsetDefault         = int32(0)
		orderDefault          = string("DESC")
		orderByDefault        = string("created")
		recordsDefault        = int32(10)
	)
	return &GetProductRatePlanByIDParams{
		IncludeRetired: &includeRetiredDefault,
		Offset:         &offsetDefault,
		Order:          &orderDefault,
		OrderBy:        &orderByDefault,
		Records:        &recordsDefault,

		timeout: timeout,
	}
}

// NewGetProductRatePlanByIDParamsWithContext creates a new GetProductRatePlanByIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetProductRatePlanByIDParamsWithContext(ctx context.Context) *GetProductRatePlanByIDParams {
	var (
		includeRetiredDefault = bool(false)
		offsetDefault         = int32(0)
		orderDefault          = string("DESC")
		orderByDefault        = string("created")
		recordsDefault        = int32(10)
	)
	return &GetProductRatePlanByIDParams{
		IncludeRetired: &includeRetiredDefault,
		Offset:         &offsetDefault,
		Order:          &orderDefault,
		OrderBy:        &orderByDefault,
		Records:        &recordsDefault,

		Context: ctx,
	}
}

// NewGetProductRatePlanByIDParamsWithHTTPClient creates a new GetProductRatePlanByIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetProductRatePlanByIDParamsWithHTTPClient(client *http.Client) *GetProductRatePlanByIDParams {
	var (
		includeRetiredDefault = bool(false)
		offsetDefault         = int32(0)
		orderDefault          = string("DESC")
		orderByDefault        = string("created")
		recordsDefault        = int32(10)
	)
	return &GetProductRatePlanByIDParams{
		IncludeRetired: &includeRetiredDefault,
		Offset:         &offsetDefault,
		Order:          &orderDefault,
		OrderBy:        &orderByDefault,
		Records:        &recordsDefault,
		HTTPClient:     client,
	}
}

/*GetProductRatePlanByIDParams contains all the parameters to send to the API endpoint
for the get product rate plan by ID operation typically these are written to a http.Request
*/
type GetProductRatePlanByIDParams struct {

	/*IncludeRetired
	  Whether retired products should be returned.

	*/
	IncludeRetired *bool
	/*Offset
	  The offset from the first product-rate-plan to return.

	*/
	Offset *int32
	/*Order
	  Ihe direction of any ordering, either ASC or DESC.

	*/
	Order *string
	/*OrderBy
	  Specify a field used to order the result set.

	*/
	OrderBy *string
	/*Organizations
	  A list of organization-IDs used to restrict the scope of API calls.

	*/
	Organizations []string
	/*ProductRatePlanID
	  id or name of the product-rate-plan.

	*/
	ProductRatePlanID string
	/*Records
	  The maximum number of product-rate-plans to return.

	*/
	Records *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get product rate plan by ID params
func (o *GetProductRatePlanByIDParams) WithTimeout(timeout time.Duration) *GetProductRatePlanByIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get product rate plan by ID params
func (o *GetProductRatePlanByIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get product rate plan by ID params
func (o *GetProductRatePlanByIDParams) WithContext(ctx context.Context) *GetProductRatePlanByIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get product rate plan by ID params
func (o *GetProductRatePlanByIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get product rate plan by ID params
func (o *GetProductRatePlanByIDParams) WithHTTPClient(client *http.Client) *GetProductRatePlanByIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get product rate plan by ID params
func (o *GetProductRatePlanByIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIncludeRetired adds the includeRetired to the get product rate plan by ID params
func (o *GetProductRatePlanByIDParams) WithIncludeRetired(includeRetired *bool) *GetProductRatePlanByIDParams {
	o.SetIncludeRetired(includeRetired)
	return o
}

// SetIncludeRetired adds the includeRetired to the get product rate plan by ID params
func (o *GetProductRatePlanByIDParams) SetIncludeRetired(includeRetired *bool) {
	o.IncludeRetired = includeRetired
}

// WithOffset adds the offset to the get product rate plan by ID params
func (o *GetProductRatePlanByIDParams) WithOffset(offset *int32) *GetProductRatePlanByIDParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get product rate plan by ID params
func (o *GetProductRatePlanByIDParams) SetOffset(offset *int32) {
	o.Offset = offset
}

// WithOrder adds the order to the get product rate plan by ID params
func (o *GetProductRatePlanByIDParams) WithOrder(order *string) *GetProductRatePlanByIDParams {
	o.SetOrder(order)
	return o
}

// SetOrder adds the order to the get product rate plan by ID params
func (o *GetProductRatePlanByIDParams) SetOrder(order *string) {
	o.Order = order
}

// WithOrderBy adds the orderBy to the get product rate plan by ID params
func (o *GetProductRatePlanByIDParams) WithOrderBy(orderBy *string) *GetProductRatePlanByIDParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the get product rate plan by ID params
func (o *GetProductRatePlanByIDParams) SetOrderBy(orderBy *string) {
	o.OrderBy = orderBy
}

// WithOrganizations adds the organizations to the get product rate plan by ID params
func (o *GetProductRatePlanByIDParams) WithOrganizations(organizations []string) *GetProductRatePlanByIDParams {
	o.SetOrganizations(organizations)
	return o
}

// SetOrganizations adds the organizations to the get product rate plan by ID params
func (o *GetProductRatePlanByIDParams) SetOrganizations(organizations []string) {
	o.Organizations = organizations
}

// WithProductRatePlanID adds the productRatePlanID to the get product rate plan by ID params
func (o *GetProductRatePlanByIDParams) WithProductRatePlanID(productRatePlanID string) *GetProductRatePlanByIDParams {
	o.SetProductRatePlanID(productRatePlanID)
	return o
}

// SetProductRatePlanID adds the productRatePlanId to the get product rate plan by ID params
func (o *GetProductRatePlanByIDParams) SetProductRatePlanID(productRatePlanID string) {
	o.ProductRatePlanID = productRatePlanID
}

// WithRecords adds the records to the get product rate plan by ID params
func (o *GetProductRatePlanByIDParams) WithRecords(records *int32) *GetProductRatePlanByIDParams {
	o.SetRecords(records)
	return o
}

// SetRecords adds the records to the get product rate plan by ID params
func (o *GetProductRatePlanByIDParams) SetRecords(records *int32) {
	o.Records = records
}

// WriteToRequest writes these params to a swagger request
func (o *GetProductRatePlanByIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IncludeRetired != nil {

		// query param include_retired
		var qrIncludeRetired bool
		if o.IncludeRetired != nil {
			qrIncludeRetired = *o.IncludeRetired
		}
		qIncludeRetired := swag.FormatBool(qrIncludeRetired)
		if qIncludeRetired != "" {
			if err := r.SetQueryParam("include_retired", qIncludeRetired); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int32
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt32(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.Order != nil {

		// query param order
		var qrOrder string
		if o.Order != nil {
			qrOrder = *o.Order
		}
		qOrder := qrOrder
		if qOrder != "" {
			if err := r.SetQueryParam("order", qOrder); err != nil {
				return err
			}
		}

	}

	if o.OrderBy != nil {

		// query param order_by
		var qrOrderBy string
		if o.OrderBy != nil {
			qrOrderBy = *o.OrderBy
		}
		qOrderBy := qrOrderBy
		if qOrderBy != "" {
			if err := r.SetQueryParam("order_by", qOrderBy); err != nil {
				return err
			}
		}

	}

	valuesOrganizations := o.Organizations

	joinedOrganizations := swag.JoinByFormat(valuesOrganizations, "multi")
	// query array param organizations
	if err := r.SetQueryParam("organizations", joinedOrganizations...); err != nil {
		return err
	}

	// path param product-rate-plan-ID
	if err := r.SetPathParam("product-rate-plan-ID", o.ProductRatePlanID); err != nil {
		return err
	}

	if o.Records != nil {

		// query param records
		var qrRecords int32
		if o.Records != nil {
			qrRecords = *o.Records
		}
		qRecords := swag.FormatInt32(qrRecords)
		if qRecords != "" {
			if err := r.SetQueryParam("records", qRecords); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
