package subscriptions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetSubscriptionByIDParams creates a new GetSubscriptionByIDParams object
// with the default values initialized.
func NewGetSubscriptionByIDParams() *GetSubscriptionByIDParams {
	var (
		includeRetiredDefault = bool(false)
	)
	return &GetSubscriptionByIDParams{
		IncludeRetired: &includeRetiredDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetSubscriptionByIDParamsWithTimeout creates a new GetSubscriptionByIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetSubscriptionByIDParamsWithTimeout(timeout time.Duration) *GetSubscriptionByIDParams {
	var (
		includeRetiredDefault bool = bool(false)
	)
	return &GetSubscriptionByIDParams{
		IncludeRetired: &includeRetiredDefault,

		timeout: timeout,
	}
}

/*GetSubscriptionByIDParams contains all the parameters to send to the API endpoint
for the get subscription by ID operation typically these are written to a http.Request
*/
type GetSubscriptionByIDParams struct {

	/*IncludeRetired
	  Whether retired subscriptions should be returned.

	*/
	IncludeRetired *bool
	/*Organizations
	  A list of organization-IDs used to restrict the scope of API calls.

	*/
	Organizations []string
	/*SubscriptionID*/
	SubscriptionID string

	timeout time.Duration
}

// WithIncludeRetired adds the includeRetired to the get subscription by ID params
func (o *GetSubscriptionByIDParams) WithIncludeRetired(includeRetired *bool) *GetSubscriptionByIDParams {
	o.IncludeRetired = includeRetired
	return o
}

// WithOrganizations adds the organizations to the get subscription by ID params
func (o *GetSubscriptionByIDParams) WithOrganizations(organizations []string) *GetSubscriptionByIDParams {
	o.Organizations = organizations
	return o
}

// WithSubscriptionID adds the subscriptionID to the get subscription by ID params
func (o *GetSubscriptionByIDParams) WithSubscriptionID(subscriptionID string) *GetSubscriptionByIDParams {
	o.SubscriptionID = subscriptionID
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetSubscriptionByIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.IncludeRetired != nil {

		// query param include_retired
		var qrIncludeRetired bool
		if o.IncludeRetired != nil {
			qrIncludeRetired = *o.IncludeRetired
		}
		qIncludeRetired := swag.FormatBool(qrIncludeRetired)
		if qIncludeRetired != "" {
			if err := r.SetQueryParam("include_retired", qIncludeRetired); err != nil {
				return err
			}
		}

	}

	valuesOrganizations := o.Organizations

	joinedOrganizations := swag.JoinByFormat(valuesOrganizations, "multi")
	// query array param organizations
	if err := r.SetQueryParam("organizations", joinedOrganizations...); err != nil {
		return err
	}

	// path param subscription-ID
	if err := r.SetPathParam("subscription-ID", o.SubscriptionID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
