package subscriptions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/authclub/billforward/models"
)

// NewCreateAggregatingSubscriptionParams creates a new CreateAggregatingSubscriptionParams object
// with the default values initialized.
func NewCreateAggregatingSubscriptionParams() *CreateAggregatingSubscriptionParams {
	var ()
	return &CreateAggregatingSubscriptionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateAggregatingSubscriptionParamsWithTimeout creates a new CreateAggregatingSubscriptionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateAggregatingSubscriptionParamsWithTimeout(timeout time.Duration) *CreateAggregatingSubscriptionParams {
	var ()
	return &CreateAggregatingSubscriptionParams{

		timeout: timeout,
	}
}

/*CreateAggregatingSubscriptionParams contains all the parameters to send to the API endpoint
for the create aggregating subscription operation typically these are written to a http.Request
*/
type CreateAggregatingSubscriptionParams struct {

	/*Request*/
	Request *models.CreateAggregatingSubscriptionRequest

	timeout time.Duration
}

// WithRequest adds the request to the create aggregating subscription params
func (o *CreateAggregatingSubscriptionParams) WithRequest(request *models.CreateAggregatingSubscriptionRequest) *CreateAggregatingSubscriptionParams {
	o.Request = request
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *CreateAggregatingSubscriptionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.Request == nil {
		o.Request = new(models.CreateAggregatingSubscriptionRequest)
	}

	if err := r.SetBodyParam(o.Request); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
