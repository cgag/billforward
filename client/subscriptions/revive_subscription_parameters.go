package subscriptions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/authclub/billforward/models"
)

// NewReviveSubscriptionParams creates a new ReviveSubscriptionParams object
// with the default values initialized.
func NewReviveSubscriptionParams() *ReviveSubscriptionParams {
	var ()
	return &ReviveSubscriptionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewReviveSubscriptionParamsWithTimeout creates a new ReviveSubscriptionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewReviveSubscriptionParamsWithTimeout(timeout time.Duration) *ReviveSubscriptionParams {
	var ()
	return &ReviveSubscriptionParams{

		timeout: timeout,
	}
}

/*ReviveSubscriptionParams contains all the parameters to send to the API endpoint
for the revive subscription operation typically these are written to a http.Request
*/
type ReviveSubscriptionParams struct {

	/*Request
	  The revive request

	*/
	Request *models.ReviveSubscriptionRequest
	/*SubscriptionID*/
	SubscriptionID string

	timeout time.Duration
}

// WithRequest adds the request to the revive subscription params
func (o *ReviveSubscriptionParams) WithRequest(request *models.ReviveSubscriptionRequest) *ReviveSubscriptionParams {
	o.Request = request
	return o
}

// WithSubscriptionID adds the subscriptionID to the revive subscription params
func (o *ReviveSubscriptionParams) WithSubscriptionID(subscriptionID string) *ReviveSubscriptionParams {
	o.SubscriptionID = subscriptionID
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *ReviveSubscriptionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.Request == nil {
		o.Request = new(models.ReviveSubscriptionRequest)
	}

	if err := r.SetBodyParam(o.Request); err != nil {
		return err
	}

	// path param subscription-ID
	if err := r.SetPathParam("subscription-ID", o.SubscriptionID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
