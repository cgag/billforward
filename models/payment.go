// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Payment Payment
// swagger:model Payment

type Payment struct {

	// { "description" : "Actual monetary value of the payment. This is real value of the payment amount, thus the amount of currency received for this payment. A coupon has a real value of zero, even though the nominal amount it pays may be greater than zero.", "verbs":["POST","PUT","GET"] }
	// Required: true
	ActualValue *float64 `json:"actualValue"`

	// { "description" : "ID of the user who last updated the entity.", "verbs":[] }
	ChangedBy string `json:"changedBy,omitempty"`

	// { "description" : "The UTC DateTime when the object was created.", "verbs":[] }
	Created strfmt.DateTime `json:"created,omitempty"`

	// { "description" : "CRM ID of the invoice.", "verbs":["POST","PUT","GET"] }
	// Required: true
	CrmID *string `json:"crmID"`

	// { "description" : "The currency of the payment specified by a three character ISO 4217 currency code.", "verbs":["POST","PUT","GET"] }
	// Required: true
	Currency *string `json:"currency"`

	// { "description" : "Payment gateway associated with the payment", "verbs":["POST","PUT","GET"] }
	// Required: true
	Gateway *string `json:"gateway"`

	// { "description" : "ID of the payment.", "verbs":["POST","PUT","GET"] }
	ID string `json:"id,omitempty"`

	// { "description" : "ID of the invoice associated with the payment. This may be null when a payment is not explicitly associated with an invoice. Payments may be used across multiple invoices.", "verbs":["POST","PUT","GET"] }
	// Required: true
	InvoiceID *string `json:"invoiceID"`

	// { "description" : "Nominal value of the payment. This is the theoretical value of the payment, thus the value this payment can pay off an invoice. For example a coupon has a nominal value of the discount, and the actual value is zero.", "verbs":["POST","PUT","GET"] }
	// Required: true
	NominalValue *float64 `json:"nominalValue"`

	// { "description" : "ID of the organization associated with the payment.", "verbs":["POST","PUT","GET"] }
	// Required: true
	OrganizationID *string `json:"organizationID"`

	// { "description" : "ID of the payment method associated with the payment.", "verbs":["POST","PUT","GET"] }
	// Required: true
	PaymentMethodID *string `json:"paymentMethodID"`

	// { "description" : "UTC DateTime specifying when payment was received for the invoice.", "verbs":["POST","PUT","GET"] }
	PaymentReceived strfmt.DateTime `json:"paymentReceived,omitempty"`

	// { "description" : "ID of the refund associated with the payment.", "verbs":["POST","PUT","GET"] }
	// Required: true
	RefundID *string `json:"refundID"`

	// { "description" : "Refunded nominal value of the payment.", "verbs":["POST","PUT","GET"] }
	// Required: true
	RefundedValue *float64 `json:"refundedValue"`

	// { "description" : "Remaining nominal value of the payment not used. In the case when a payment is used across a range of invoices a payment may be used multiple times, each use reducing the available blance of the payment.", "verbs":["POST","PUT","GET"] }
	// Required: true
	RemainingNominalValue *float64 `json:"remainingNominalValue"`

	// { "description" : "Type of payment.", "verbs":["POST","PUT","GET"] }
	// Required: true
	Type *string `json:"type"`

	// { "description" : "The UTC DateTime when the object was last updated.", "verbs":[] }
	Updated strfmt.DateTime `json:"updated,omitempty"`
}

/* polymorph Payment actualValue false */

/* polymorph Payment changedBy false */

/* polymorph Payment created false */

/* polymorph Payment crmID false */

/* polymorph Payment currency false */

/* polymorph Payment gateway false */

/* polymorph Payment id false */

/* polymorph Payment invoiceID false */

/* polymorph Payment nominalValue false */

/* polymorph Payment organizationID false */

/* polymorph Payment paymentMethodID false */

/* polymorph Payment paymentReceived false */

/* polymorph Payment refundID false */

/* polymorph Payment refundedValue false */

/* polymorph Payment remainingNominalValue false */

/* polymorph Payment type false */

/* polymorph Payment updated false */

// Validate validates this payment
func (m *Payment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActualValue(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCrmID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGateway(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateInvoiceID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNominalValue(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOrganizationID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePaymentMethodID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRefundID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRefundedValue(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRemainingNominalValue(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Payment) validateActualValue(formats strfmt.Registry) error {

	if err := validate.Required("actualValue", "body", m.ActualValue); err != nil {
		return err
	}

	return nil
}

func (m *Payment) validateCrmID(formats strfmt.Registry) error {

	if err := validate.Required("crmID", "body", m.CrmID); err != nil {
		return err
	}

	return nil
}

func (m *Payment) validateCurrency(formats strfmt.Registry) error {

	if err := validate.Required("currency", "body", m.Currency); err != nil {
		return err
	}

	return nil
}

var paymentTypeGatewayPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["cybersource_token","card_vault","paypal_simple","locustworld","free","coupon","credit_note","stripe","braintree","balanced","paypal","billforward_test","offline","trial","stripeACH","authorizeNet","spreedly","sagePay","trustCommerce","payvision","kash"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		paymentTypeGatewayPropEnum = append(paymentTypeGatewayPropEnum, v)
	}
}

const (
	// PaymentGatewayCybersourceToken captures enum value "cybersource_token"
	PaymentGatewayCybersourceToken string = "cybersource_token"
	// PaymentGatewayCardVault captures enum value "card_vault"
	PaymentGatewayCardVault string = "card_vault"
	// PaymentGatewayPaypalSimple captures enum value "paypal_simple"
	PaymentGatewayPaypalSimple string = "paypal_simple"
	// PaymentGatewayLocustworld captures enum value "locustworld"
	PaymentGatewayLocustworld string = "locustworld"
	// PaymentGatewayFree captures enum value "free"
	PaymentGatewayFree string = "free"
	// PaymentGatewayCoupon captures enum value "coupon"
	PaymentGatewayCoupon string = "coupon"
	// PaymentGatewayCreditNote captures enum value "credit_note"
	PaymentGatewayCreditNote string = "credit_note"
	// PaymentGatewayStripe captures enum value "stripe"
	PaymentGatewayStripe string = "stripe"
	// PaymentGatewayBraintree captures enum value "braintree"
	PaymentGatewayBraintree string = "braintree"
	// PaymentGatewayBalanced captures enum value "balanced"
	PaymentGatewayBalanced string = "balanced"
	// PaymentGatewayPaypal captures enum value "paypal"
	PaymentGatewayPaypal string = "paypal"
	// PaymentGatewayBillforwardTest captures enum value "billforward_test"
	PaymentGatewayBillforwardTest string = "billforward_test"
	// PaymentGatewayOffline captures enum value "offline"
	PaymentGatewayOffline string = "offline"
	// PaymentGatewayTrial captures enum value "trial"
	PaymentGatewayTrial string = "trial"
	// PaymentGatewayStripeACH captures enum value "stripeACH"
	PaymentGatewayStripeACH string = "stripeACH"
	// PaymentGatewayAuthorizeNet captures enum value "authorizeNet"
	PaymentGatewayAuthorizeNet string = "authorizeNet"
	// PaymentGatewaySpreedly captures enum value "spreedly"
	PaymentGatewaySpreedly string = "spreedly"
	// PaymentGatewaySagePay captures enum value "sagePay"
	PaymentGatewaySagePay string = "sagePay"
	// PaymentGatewayTrustCommerce captures enum value "trustCommerce"
	PaymentGatewayTrustCommerce string = "trustCommerce"
	// PaymentGatewayPayvision captures enum value "payvision"
	PaymentGatewayPayvision string = "payvision"
	// PaymentGatewayKash captures enum value "kash"
	PaymentGatewayKash string = "kash"
)

// prop value enum
func (m *Payment) validateGatewayEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, paymentTypeGatewayPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Payment) validateGateway(formats strfmt.Registry) error {

	if err := validate.Required("gateway", "body", m.Gateway); err != nil {
		return err
	}

	// value enum
	if err := m.validateGatewayEnum("gateway", "body", *m.Gateway); err != nil {
		return err
	}

	return nil
}

func (m *Payment) validateInvoiceID(formats strfmt.Registry) error {

	if err := validate.Required("invoiceID", "body", m.InvoiceID); err != nil {
		return err
	}

	return nil
}

func (m *Payment) validateNominalValue(formats strfmt.Registry) error {

	if err := validate.Required("nominalValue", "body", m.NominalValue); err != nil {
		return err
	}

	return nil
}

func (m *Payment) validateOrganizationID(formats strfmt.Registry) error {

	if err := validate.Required("organizationID", "body", m.OrganizationID); err != nil {
		return err
	}

	return nil
}

func (m *Payment) validatePaymentMethodID(formats strfmt.Registry) error {

	if err := validate.Required("paymentMethodID", "body", m.PaymentMethodID); err != nil {
		return err
	}

	return nil
}

func (m *Payment) validateRefundID(formats strfmt.Registry) error {

	if err := validate.Required("refundID", "body", m.RefundID); err != nil {
		return err
	}

	return nil
}

func (m *Payment) validateRefundedValue(formats strfmt.Registry) error {

	if err := validate.Required("refundedValue", "body", m.RefundedValue); err != nil {
		return err
	}

	return nil
}

func (m *Payment) validateRemainingNominalValue(formats strfmt.Registry) error {

	if err := validate.Required("remainingNominalValue", "body", m.RemainingNominalValue); err != nil {
		return err
	}

	return nil
}

var paymentTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["credit","debit"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		paymentTypeTypePropEnum = append(paymentTypeTypePropEnum, v)
	}
}

const (
	// PaymentTypeCredit captures enum value "credit"
	PaymentTypeCredit string = "credit"
	// PaymentTypeDebit captures enum value "debit"
	PaymentTypeDebit string = "debit"
)

// prop value enum
func (m *Payment) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, paymentTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Payment) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Payment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Payment) UnmarshalBinary(b []byte) error {
	var res Payment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
