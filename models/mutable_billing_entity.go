// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MutableBillingEntity Mutable entities are those entities that can be updated after their initial creation.
// swagger:model MutableBillingEntity
type MutableBillingEntity struct {

	// { "description" : "ID of the user who last updated the entity.", "verbs":[] }
	ChangedBy string `json:"changedBy,omitempty"`

	// This is config id which links to this sync job.
	// Required: true
	ConfigID *string `json:"configID"`

	// { "description" : "The UTC DateTime when the object was created.", "verbs":[] }
	Created strfmt.DateTime `json:"created,omitempty"`

	// The account who created the synch job.
	CreatedBy string `json:"createdBy,omitempty"`

	// UTC DateTime of the start of the data to sync.
	DataFrom strfmt.DateTime `json:"dataFrom,omitempty"`

	// UTC DateTime of the start of the data to sync.
	DataTill strfmt.DateTime `json:"dataTill,omitempty"`

	// Is the sync job deleted.
	// Required: true
	Deleted bool `json:"deleted"`

	// Description of the Job.
	// Required: true
	Description *string `json:"description"`

	// ID of the Synchronization Job.
	ID string `json:"id,omitempty"`

	// The max number of times the records will try to resync.
	// Required: true
	MaxRetryTimes *int32 `json:"maxRetryTimes"`

	// Name of the Job.
	// Required: true
	Name *string `json:"name"`

	// Organization associated with the refund.
	// Required: true
	OrganizationID *string `json:"organizationID"`

	// The number of times the records tried to resync.
	// Required: true
	RetryAttempted *int32 `json:"retryAttempted"`

	// The scope of the data synch'd.
	// Required: true
	Scope *string `json:"scope"`

	// UTC DateTime of the end of the data to sync.
	Started strfmt.DateTime `json:"started,omitempty"`

	// This is the state of job. Pending jobs have not run. Complete jobs have run without error. Failed jobs have one of more errors. Cancelled jobs did not run.
	// Required: true
	State *string `json:"state"`

	// UTC DateTime of the start of the data to sync.
	Stopped strfmt.DateTime `json:"stopped,omitempty"`

	// This is the target of the job.
	// Required: true
	Target *string `json:"target"`

	// This is the type of job. Incremental jobs just sync changes, fully jobs sync all data.
	// Required: true
	Type *string `json:"type"`

	// { "description" : "The UTC DateTime when the object was last updated.", "verbs":[] }
	Updated strfmt.DateTime `json:"updated,omitempty"`
}

// Validate validates this mutable billing entity
func (m *MutableBillingEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfigID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDeleted(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMaxRetryTimes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOrganizationID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRetryAttempted(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateScope(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTarget(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MutableBillingEntity) validateConfigID(formats strfmt.Registry) error {

	if err := validate.Required("configID", "body", m.ConfigID); err != nil {
		return err
	}

	return nil
}

func (m *MutableBillingEntity) validateDeleted(formats strfmt.Registry) error {

	if err := validate.Required("deleted", "body", bool(m.Deleted)); err != nil {
		return err
	}

	return nil
}

func (m *MutableBillingEntity) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *MutableBillingEntity) validateMaxRetryTimes(formats strfmt.Registry) error {

	if err := validate.Required("maxRetryTimes", "body", m.MaxRetryTimes); err != nil {
		return err
	}

	return nil
}

func (m *MutableBillingEntity) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *MutableBillingEntity) validateOrganizationID(formats strfmt.Registry) error {

	if err := validate.Required("organizationID", "body", m.OrganizationID); err != nil {
		return err
	}

	return nil
}

func (m *MutableBillingEntity) validateRetryAttempted(formats strfmt.Registry) error {

	if err := validate.Required("retryAttempted", "body", m.RetryAttempted); err != nil {
		return err
	}

	return nil
}

var mutableBillingEntityTypeScopePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Manual","Scheduled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		mutableBillingEntityTypeScopePropEnum = append(mutableBillingEntityTypeScopePropEnum, v)
	}
}

const (
	// MutableBillingEntityScopeManual captures enum value "Manual"
	MutableBillingEntityScopeManual string = "Manual"
	// MutableBillingEntityScopeScheduled captures enum value "Scheduled"
	MutableBillingEntityScopeScheduled string = "Scheduled"
)

// prop value enum
func (m *MutableBillingEntity) validateScopeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, mutableBillingEntityTypeScopePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MutableBillingEntity) validateScope(formats strfmt.Registry) error {

	if err := validate.Required("scope", "body", m.Scope); err != nil {
		return err
	}

	// value enum
	if err := m.validateScopeEnum("scope", "body", *m.Scope); err != nil {
		return err
	}

	return nil
}

var mutableBillingEntityTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Pending","Complete","Failed","Cancelled","Processing"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		mutableBillingEntityTypeStatePropEnum = append(mutableBillingEntityTypeStatePropEnum, v)
	}
}

const (
	// MutableBillingEntityStatePending captures enum value "Pending"
	MutableBillingEntityStatePending string = "Pending"
	// MutableBillingEntityStateComplete captures enum value "Complete"
	MutableBillingEntityStateComplete string = "Complete"
	// MutableBillingEntityStateFailed captures enum value "Failed"
	MutableBillingEntityStateFailed string = "Failed"
	// MutableBillingEntityStateCancelled captures enum value "Cancelled"
	MutableBillingEntityStateCancelled string = "Cancelled"
	// MutableBillingEntityStateProcessing captures enum value "Processing"
	MutableBillingEntityStateProcessing string = "Processing"
)

// prop value enum
func (m *MutableBillingEntity) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, mutableBillingEntityTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MutableBillingEntity) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	// value enum
	if err := m.validateStateEnum("state", "body", *m.State); err != nil {
		return err
	}

	return nil
}

var mutableBillingEntityTypeTargetPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Salesforce"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		mutableBillingEntityTypeTargetPropEnum = append(mutableBillingEntityTypeTargetPropEnum, v)
	}
}

const (
	// MutableBillingEntityTargetSalesforce captures enum value "Salesforce"
	MutableBillingEntityTargetSalesforce string = "Salesforce"
)

// prop value enum
func (m *MutableBillingEntity) validateTargetEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, mutableBillingEntityTypeTargetPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MutableBillingEntity) validateTarget(formats strfmt.Registry) error {

	if err := validate.Required("target", "body", m.Target); err != nil {
		return err
	}

	// value enum
	if err := m.validateTargetEnum("target", "body", *m.Target); err != nil {
		return err
	}

	return nil
}

var mutableBillingEntityTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Incremental","Full"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		mutableBillingEntityTypeTypePropEnum = append(mutableBillingEntityTypeTypePropEnum, v)
	}
}

const (
	// MutableBillingEntityTypeIncremental captures enum value "Incremental"
	MutableBillingEntityTypeIncremental string = "Incremental"
	// MutableBillingEntityTypeFull captures enum value "Full"
	MutableBillingEntityTypeFull string = "Full"
)

// prop value enum
func (m *MutableBillingEntity) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, mutableBillingEntityTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MutableBillingEntity) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MutableBillingEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MutableBillingEntity) UnmarshalBinary(b []byte) error {
	var res MutableBillingEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
