// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TieredVolumePricingComponent tiered volume pricing component
// swagger:model tieredVolumePricingComponent
type TieredVolumePricingComponent struct {
	changedByField string

	chargeModelField *string

	chargeTypeField *string

	createdField strfmt.DateTime

	crmIdField string

	defaultQuantityField *int32

	descriptionField string

	downgradeModeField string

	idField *string

	invoicingTypeField string

	maxQuantityField int32

	minQuantityField int32

	nameField *string

	organizationIdField *string

	productRatePlanIdField *string

	publicNameField string

	tiersField []*PricingComponentTier

	unitOfMeasureField *UnitOfMeasure

	unitOfMeasureIdField *string

	updatedField strfmt.DateTime

	upgradeModeField string

	validFromField *strfmt.DateTime

	validTillField *strfmt.DateTime

	versionIdField *string
}

func (m *TieredVolumePricingComponent) AtType() string {
	return "tieredVolumePricingComponent"
}
func (m *TieredVolumePricingComponent) SetAtType(val string) {

}

func (m *TieredVolumePricingComponent) ChangedBy() string {
	return m.changedByField
}
func (m *TieredVolumePricingComponent) SetChangedBy(val string) {
	m.changedByField = val
}

func (m *TieredVolumePricingComponent) ChargeModel() *string {
	return m.chargeModelField
}
func (m *TieredVolumePricingComponent) SetChargeModel(val *string) {
	m.chargeModelField = val
}

func (m *TieredVolumePricingComponent) ChargeType() *string {
	return m.chargeTypeField
}
func (m *TieredVolumePricingComponent) SetChargeType(val *string) {
	m.chargeTypeField = val
}

func (m *TieredVolumePricingComponent) Created() strfmt.DateTime {
	return m.createdField
}
func (m *TieredVolumePricingComponent) SetCreated(val strfmt.DateTime) {
	m.createdField = val
}

func (m *TieredVolumePricingComponent) CrmID() string {
	return m.crmIdField
}
func (m *TieredVolumePricingComponent) SetCrmID(val string) {
	m.crmIdField = val
}

func (m *TieredVolumePricingComponent) DefaultQuantity() *int32 {
	return m.defaultQuantityField
}
func (m *TieredVolumePricingComponent) SetDefaultQuantity(val *int32) {
	m.defaultQuantityField = val
}

func (m *TieredVolumePricingComponent) Description() string {
	return m.descriptionField
}
func (m *TieredVolumePricingComponent) SetDescription(val string) {
	m.descriptionField = val
}

func (m *TieredVolumePricingComponent) DowngradeMode() string {
	return m.downgradeModeField
}
func (m *TieredVolumePricingComponent) SetDowngradeMode(val string) {
	m.downgradeModeField = val
}

func (m *TieredVolumePricingComponent) ID() *string {
	return m.idField
}
func (m *TieredVolumePricingComponent) SetID(val *string) {
	m.idField = val
}

func (m *TieredVolumePricingComponent) InvoicingType() string {
	return m.invoicingTypeField
}
func (m *TieredVolumePricingComponent) SetInvoicingType(val string) {
	m.invoicingTypeField = val
}

func (m *TieredVolumePricingComponent) MaxQuantity() int32 {
	return m.maxQuantityField
}
func (m *TieredVolumePricingComponent) SetMaxQuantity(val int32) {
	m.maxQuantityField = val
}

func (m *TieredVolumePricingComponent) MinQuantity() int32 {
	return m.minQuantityField
}
func (m *TieredVolumePricingComponent) SetMinQuantity(val int32) {
	m.minQuantityField = val
}

func (m *TieredVolumePricingComponent) Name() *string {
	return m.nameField
}
func (m *TieredVolumePricingComponent) SetName(val *string) {
	m.nameField = val
}

func (m *TieredVolumePricingComponent) OrganizationID() *string {
	return m.organizationIdField
}
func (m *TieredVolumePricingComponent) SetOrganizationID(val *string) {
	m.organizationIdField = val
}

func (m *TieredVolumePricingComponent) ProductRatePlanID() *string {
	return m.productRatePlanIdField
}
func (m *TieredVolumePricingComponent) SetProductRatePlanID(val *string) {
	m.productRatePlanIdField = val
}

func (m *TieredVolumePricingComponent) PublicName() string {
	return m.publicNameField
}
func (m *TieredVolumePricingComponent) SetPublicName(val string) {
	m.publicNameField = val
}

func (m *TieredVolumePricingComponent) Tiers() []*PricingComponentTier {
	return m.tiersField
}
func (m *TieredVolumePricingComponent) SetTiers(val []*PricingComponentTier) {
	m.tiersField = val
}

func (m *TieredVolumePricingComponent) UnitOfMeasure() *UnitOfMeasure {
	return m.unitOfMeasureField
}
func (m *TieredVolumePricingComponent) SetUnitOfMeasure(val *UnitOfMeasure) {
	m.unitOfMeasureField = val
}

func (m *TieredVolumePricingComponent) UnitOfMeasureID() *string {
	return m.unitOfMeasureIdField
}
func (m *TieredVolumePricingComponent) SetUnitOfMeasureID(val *string) {
	m.unitOfMeasureIdField = val
}

func (m *TieredVolumePricingComponent) Updated() strfmt.DateTime {
	return m.updatedField
}
func (m *TieredVolumePricingComponent) SetUpdated(val strfmt.DateTime) {
	m.updatedField = val
}

func (m *TieredVolumePricingComponent) UpgradeMode() string {
	return m.upgradeModeField
}
func (m *TieredVolumePricingComponent) SetUpgradeMode(val string) {
	m.upgradeModeField = val
}

func (m *TieredVolumePricingComponent) ValidFrom() *strfmt.DateTime {
	return m.validFromField
}
func (m *TieredVolumePricingComponent) SetValidFrom(val *strfmt.DateTime) {
	m.validFromField = val
}

func (m *TieredVolumePricingComponent) ValidTill() *strfmt.DateTime {
	return m.validTillField
}
func (m *TieredVolumePricingComponent) SetValidTill(val *strfmt.DateTime) {
	m.validTillField = val
}

func (m *TieredVolumePricingComponent) VersionID() *string {
	return m.versionIdField
}
func (m *TieredVolumePricingComponent) SetVersionID(val *string) {
	m.versionIdField = val
}

// UnmarshalJSON unmarshals this polymorphic type from a JSON structure
func (m *TieredVolumePricingComponent) UnmarshalJSON(raw []byte) error {
	var data struct {
		AtType string `json:"@type"`

		ChangedBy string `json:"changedBy,omitempty"`

		ChargeModel *string `json:"chargeModel"`

		ChargeType *string `json:"chargeType"`

		Created strfmt.DateTime `json:"created,omitempty"`

		CrmID string `json:"crmID,omitempty"`

		DefaultQuantity *int32 `json:"defaultQuantity"`

		Description string `json:"description,omitempty"`

		DowngradeMode string `json:"downgradeMode,omitempty"`

		ID *string `json:"id"`

		InvoicingType string `json:"invoicingType,omitempty"`

		MaxQuantity int32 `json:"maxQuantity,omitempty"`

		MinQuantity int32 `json:"minQuantity,omitempty"`

		Name *string `json:"name"`

		OrganizationID *string `json:"organizationID"`

		ProductRatePlanID *string `json:"productRatePlanID"`

		PublicName string `json:"publicName,omitempty"`

		Tiers []*PricingComponentTier `json:"tiers"`

		UnitOfMeasure *UnitOfMeasure `json:"unitOfMeasure,omitempty"`

		UnitOfMeasureID *string `json:"unitOfMeasureID"`

		Updated strfmt.DateTime `json:"updated,omitempty"`

		UpgradeMode string `json:"upgradeMode,omitempty"`

		ValidFrom *strfmt.DateTime `json:"validFrom"`

		ValidTill *strfmt.DateTime `json:"validTill,omitempty"`

		VersionID *string `json:"versionID"`
	}

	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	m.changedByField = data.ChangedBy
	m.chargeModelField = data.ChargeModel
	m.chargeTypeField = data.ChargeType
	m.createdField = data.Created
	m.crmIdField = data.CrmID
	m.defaultQuantityField = data.DefaultQuantity
	m.descriptionField = data.Description
	m.downgradeModeField = data.DowngradeMode
	m.idField = data.ID
	m.invoicingTypeField = data.InvoicingType
	m.maxQuantityField = data.MaxQuantity
	m.minQuantityField = data.MinQuantity
	m.nameField = data.Name
	m.organizationIdField = data.OrganizationID
	m.productRatePlanIdField = data.ProductRatePlanID
	m.publicNameField = data.PublicName
	m.tiersField = data.Tiers
	m.unitOfMeasureField = data.UnitOfMeasure
	m.unitOfMeasureIdField = data.UnitOfMeasureID
	m.updatedField = data.Updated
	m.upgradeModeField = data.UpgradeMode
	m.validFromField = data.ValidFrom
	m.validTillField = data.ValidTill
	m.versionIdField = data.VersionID

	return nil
}

// MarshalJSON marshals this polymorphic type to a JSON structure
func (m TieredVolumePricingComponent) MarshalJSON() ([]byte, error) {
	var data struct {
		AtType string `json:"@type"`

		ChangedBy string `json:"changedBy,omitempty"`

		ChargeModel *string `json:"chargeModel"`

		ChargeType *string `json:"chargeType"`

		Created strfmt.DateTime `json:"created,omitempty"`

		CrmID string `json:"crmID,omitempty"`

		DefaultQuantity *int32 `json:"defaultQuantity"`

		Description string `json:"description,omitempty"`

		DowngradeMode string `json:"downgradeMode,omitempty"`

		ID *string `json:"id"`

		InvoicingType string `json:"invoicingType,omitempty"`

		MaxQuantity int32 `json:"maxQuantity,omitempty"`

		MinQuantity int32 `json:"minQuantity,omitempty"`

		Name *string `json:"name"`

		OrganizationID *string `json:"organizationID"`

		ProductRatePlanID *string `json:"productRatePlanID"`

		PublicName string `json:"publicName,omitempty"`

		Tiers []*PricingComponentTier `json:"tiers"`

		UnitOfMeasure *UnitOfMeasure `json:"unitOfMeasure,omitempty"`

		UnitOfMeasureID *string `json:"unitOfMeasureID"`

		Updated strfmt.DateTime `json:"updated,omitempty"`

		UpgradeMode string `json:"upgradeMode,omitempty"`

		ValidFrom *strfmt.DateTime `json:"validFrom"`

		ValidTill *strfmt.DateTime `json:"validTill,omitempty"`

		VersionID *string `json:"versionID"`
	}

	data.ChangedBy = m.changedByField
	data.ChargeModel = m.chargeModelField
	data.ChargeType = m.chargeTypeField
	data.Created = m.createdField
	data.CrmID = m.crmIdField
	data.DefaultQuantity = m.defaultQuantityField
	data.Description = m.descriptionField
	data.DowngradeMode = m.downgradeModeField
	data.ID = m.idField
	data.InvoicingType = m.invoicingTypeField
	data.MaxQuantity = m.maxQuantityField
	data.MinQuantity = m.minQuantityField
	data.Name = m.nameField
	data.OrganizationID = m.organizationIdField
	data.ProductRatePlanID = m.productRatePlanIdField
	data.PublicName = m.publicNameField
	data.Tiers = m.tiersField
	data.UnitOfMeasure = m.unitOfMeasureField
	data.UnitOfMeasureID = m.unitOfMeasureIdField
	data.Updated = m.updatedField
	data.UpgradeMode = m.upgradeModeField
	data.ValidFrom = m.validFromField
	data.ValidTill = m.validTillField
	data.VersionID = m.versionIdField
	data.AtType = "tieredVolumePricingComponent"
	return json.Marshal(data)
}

// Validate validates this tiered volume pricing component
func (m *TieredVolumePricingComponent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChargeModel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChargeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDowngradeMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvoicingType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductRatePlanID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTiers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnitOfMeasure(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnitOfMeasureID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpgradeMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var tieredVolumePricingComponentTypeChargeModelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["flat","tiered","tiered_volume"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tieredVolumePricingComponentTypeChargeModelPropEnum = append(tieredVolumePricingComponentTypeChargeModelPropEnum, v)
	}
}

// property enum
func (m *TieredVolumePricingComponent) validateChargeModelEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, tieredVolumePricingComponentTypeChargeModelPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TieredVolumePricingComponent) validateChargeModel(formats strfmt.Registry) error {

	if err := validate.Required("chargeModel", "body", m.ChargeModel()); err != nil {
		return err
	}

	// value enum
	if err := m.validateChargeModelEnum("chargeModel", "body", *m.ChargeModel()); err != nil {
		return err
	}

	return nil
}

var tieredVolumePricingComponentTypeChargeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["setup","subscription","arrears","usage"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tieredVolumePricingComponentTypeChargeTypePropEnum = append(tieredVolumePricingComponentTypeChargeTypePropEnum, v)
	}
}

// property enum
func (m *TieredVolumePricingComponent) validateChargeTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, tieredVolumePricingComponentTypeChargeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TieredVolumePricingComponent) validateChargeType(formats strfmt.Registry) error {

	if err := validate.Required("chargeType", "body", m.ChargeType()); err != nil {
		return err
	}

	// value enum
	if err := m.validateChargeTypeEnum("chargeType", "body", *m.ChargeType()); err != nil {
		return err
	}

	return nil
}

func (m *TieredVolumePricingComponent) validateDefaultQuantity(formats strfmt.Registry) error {

	if err := validate.Required("defaultQuantity", "body", m.DefaultQuantity()); err != nil {
		return err
	}

	return nil
}

var tieredVolumePricingComponentTypeDowngradeModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["immediate","delayed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tieredVolumePricingComponentTypeDowngradeModePropEnum = append(tieredVolumePricingComponentTypeDowngradeModePropEnum, v)
	}
}

// property enum
func (m *TieredVolumePricingComponent) validateDowngradeModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, tieredVolumePricingComponentTypeDowngradeModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TieredVolumePricingComponent) validateDowngradeMode(formats strfmt.Registry) error {

	if swag.IsZero(m.DowngradeMode()) { // not required
		return nil
	}

	// value enum
	if err := m.validateDowngradeModeEnum("downgradeMode", "body", m.DowngradeMode()); err != nil {
		return err
	}

	return nil
}

func (m *TieredVolumePricingComponent) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID()); err != nil {
		return err
	}

	return nil
}

var tieredVolumePricingComponentTypeInvoicingTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Immediate","Aggregated"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tieredVolumePricingComponentTypeInvoicingTypePropEnum = append(tieredVolumePricingComponentTypeInvoicingTypePropEnum, v)
	}
}

// property enum
func (m *TieredVolumePricingComponent) validateInvoicingTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, tieredVolumePricingComponentTypeInvoicingTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TieredVolumePricingComponent) validateInvoicingType(formats strfmt.Registry) error {

	if swag.IsZero(m.InvoicingType()) { // not required
		return nil
	}

	// value enum
	if err := m.validateInvoicingTypeEnum("invoicingType", "body", m.InvoicingType()); err != nil {
		return err
	}

	return nil
}

func (m *TieredVolumePricingComponent) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name()); err != nil {
		return err
	}

	return nil
}

func (m *TieredVolumePricingComponent) validateOrganizationID(formats strfmt.Registry) error {

	if err := validate.Required("organizationID", "body", m.OrganizationID()); err != nil {
		return err
	}

	return nil
}

func (m *TieredVolumePricingComponent) validateProductRatePlanID(formats strfmt.Registry) error {

	if err := validate.Required("productRatePlanID", "body", m.ProductRatePlanID()); err != nil {
		return err
	}

	return nil
}

func (m *TieredVolumePricingComponent) validateTiers(formats strfmt.Registry) error {

	if swag.IsZero(m.Tiers()) { // not required
		return nil
	}

	for i := 0; i < len(m.Tiers()); i++ {

		if swag.IsZero(m.tiersField[i]) { // not required
			continue
		}

		if m.tiersField[i] != nil {

			if err := m.tiersField[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tiers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TieredVolumePricingComponent) validateUnitOfMeasure(formats strfmt.Registry) error {

	if swag.IsZero(m.UnitOfMeasure()) { // not required
		return nil
	}

	if m.UnitOfMeasure() != nil {

		if err := m.UnitOfMeasure().Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unitOfMeasure")
			}
			return err
		}
	}

	return nil
}

func (m *TieredVolumePricingComponent) validateUnitOfMeasureID(formats strfmt.Registry) error {

	if err := validate.Required("unitOfMeasureID", "body", m.UnitOfMeasureID()); err != nil {
		return err
	}

	return nil
}

var tieredVolumePricingComponentTypeUpgradeModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["immediate","delayed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tieredVolumePricingComponentTypeUpgradeModePropEnum = append(tieredVolumePricingComponentTypeUpgradeModePropEnum, v)
	}
}

// property enum
func (m *TieredVolumePricingComponent) validateUpgradeModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, tieredVolumePricingComponentTypeUpgradeModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TieredVolumePricingComponent) validateUpgradeMode(formats strfmt.Registry) error {

	if swag.IsZero(m.UpgradeMode()) { // not required
		return nil
	}

	// value enum
	if err := m.validateUpgradeModeEnum("upgradeMode", "body", m.UpgradeMode()); err != nil {
		return err
	}

	return nil
}

func (m *TieredVolumePricingComponent) validateValidFrom(formats strfmt.Registry) error {

	if err := validate.Required("validFrom", "body", m.ValidFrom()); err != nil {
		return err
	}

	return nil
}

func (m *TieredVolumePricingComponent) validateVersionID(formats strfmt.Registry) error {

	if err := validate.Required("versionID", "body", m.VersionID()); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TieredVolumePricingComponent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TieredVolumePricingComponent) UnmarshalBinary(b []byte) error {
	var res TieredVolumePricingComponent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
