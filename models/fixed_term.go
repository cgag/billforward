// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FixedTerm FixedTerm
// swagger:model FixedTerm

type FixedTerm struct {

	// { "description" : "ID of the user who last updated the entity.", "verbs":[] }
	ChangedBy string `json:"changedBy,omitempty"`

	// { "description" : "compoundUplift", "verbs":["POST","PUT","GET"] }The proportional INCREASE in price applied every time the fixed terms recur. e.g. 0.03 is a 3% increase. -0.5 is a 50% decrease. 3 is a 300% increase
	// Required: true
	CompoundUplift *float64 `json:"compoundUplift"`

	// { "description" : "The UTC DateTime when the object was created.", "verbs":[] }
	Created strfmt.DateTime `json:"created,omitempty"`

	// { "description" : "Is the fixedTerm deleted.", "verbs":["POST","PUT","GET"] }
	// Required: true
	Deleted bool `json:"deleted"`

	// fixedTermExpiryBehaviour
	// Required: true
	ExpiryBehaviour *string `json:"expiryBehaviour"`

	// expiry_time
	// Required: true
	ExpiryTime *strfmt.DateTime `json:"expiryTime"`

	// fixed term definition
	// Required: true
	FixedTermDefinition *MutableBillingEntity `json:"fixedTermDefinition"`

	// { "description" : "fixedTermDefinitionID", "verbs":["POST","PUT","GET"] }
	// Required: true
	FixedTermDefinitionID *string `json:"fixedTermDefinitionID"`

	// { "description" : "The number of sequential fixed terms previous to this one for the subscription (i.e. zero indexed 'fixedTermCount').", "verbs":["POST","PUT","GET"] }
	// Required: true
	FixedTermNumber *int32 `json:"fixedTermNumber"`

	// id
	ID string `json:"id,omitempty"`

	// { "description" : "The ID of the organization associated with the amendment.", "verbs":["POST","PUT","GET"] }
	// Required: true
	OrganizationID *string `json:"organizationID"`

	// { "description" : "The number of billing periods that this fixed term lasts for.", "verbs":["POST","PUT","GET"] }
	// Required: true
	Periods *int32 `json:"periods"`

	// productRatePlanAsOfTime
	// Required: true
	ProductRatePlanAsOfTime *strfmt.DateTime `json:"productRatePlanAsOfTime"`

	// start_time
	// Required: true
	StartTime *strfmt.DateTime `json:"startTime"`

	// state
	// Required: true
	State *string `json:"state"`

	// { "description" : "subscriptionID", "verbs":["POST","PUT","GET"] }
	// Required: true
	SubscriptionID *string `json:"subscriptionID"`

	// { "description" : "The UTC DateTime when the object was last updated.", "verbs":[] }
	Updated strfmt.DateTime `json:"updated,omitempty"`
}

/* polymorph FixedTerm changedBy false */

/* polymorph FixedTerm compoundUplift false */

/* polymorph FixedTerm created false */

/* polymorph FixedTerm deleted false */

/* polymorph FixedTerm expiryBehaviour false */

/* polymorph FixedTerm expiryTime false */

/* polymorph FixedTerm fixedTermDefinition false */

/* polymorph FixedTerm fixedTermDefinitionID false */

/* polymorph FixedTerm fixedTermNumber false */

/* polymorph FixedTerm id false */

/* polymorph FixedTerm organizationID false */

/* polymorph FixedTerm periods false */

/* polymorph FixedTerm productRatePlanAsOfTime false */

/* polymorph FixedTerm startTime false */

/* polymorph FixedTerm state false */

/* polymorph FixedTerm subscriptionID false */

/* polymorph FixedTerm updated false */

// Validate validates this fixed term
func (m *FixedTerm) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompoundUplift(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDeleted(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateExpiryBehaviour(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateExpiryTime(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFixedTermDefinition(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFixedTermDefinitionID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFixedTermNumber(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOrganizationID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePeriods(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProductRatePlanAsOfTime(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSubscriptionID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FixedTerm) validateCompoundUplift(formats strfmt.Registry) error {

	if err := validate.Required("compoundUplift", "body", m.CompoundUplift); err != nil {
		return err
	}

	return nil
}

func (m *FixedTerm) validateDeleted(formats strfmt.Registry) error {

	if err := validate.Required("deleted", "body", bool(m.Deleted)); err != nil {
		return err
	}

	return nil
}

var fixedTermTypeExpiryBehaviourPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ExpireSubscription","EvergreenSubscription","RecurUplift","RecurLatestPricing"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fixedTermTypeExpiryBehaviourPropEnum = append(fixedTermTypeExpiryBehaviourPropEnum, v)
	}
}

const (
	// FixedTermExpiryBehaviourExpireSubscription captures enum value "ExpireSubscription"
	FixedTermExpiryBehaviourExpireSubscription string = "ExpireSubscription"
	// FixedTermExpiryBehaviourEvergreenSubscription captures enum value "EvergreenSubscription"
	FixedTermExpiryBehaviourEvergreenSubscription string = "EvergreenSubscription"
	// FixedTermExpiryBehaviourRecurUplift captures enum value "RecurUplift"
	FixedTermExpiryBehaviourRecurUplift string = "RecurUplift"
	// FixedTermExpiryBehaviourRecurLatestPricing captures enum value "RecurLatestPricing"
	FixedTermExpiryBehaviourRecurLatestPricing string = "RecurLatestPricing"
)

// prop value enum
func (m *FixedTerm) validateExpiryBehaviourEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, fixedTermTypeExpiryBehaviourPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *FixedTerm) validateExpiryBehaviour(formats strfmt.Registry) error {

	if err := validate.Required("expiryBehaviour", "body", m.ExpiryBehaviour); err != nil {
		return err
	}

	// value enum
	if err := m.validateExpiryBehaviourEnum("expiryBehaviour", "body", *m.ExpiryBehaviour); err != nil {
		return err
	}

	return nil
}

func (m *FixedTerm) validateExpiryTime(formats strfmt.Registry) error {

	if err := validate.Required("expiryTime", "body", m.ExpiryTime); err != nil {
		return err
	}

	if err := validate.FormatOf("expiryTime", "body", "date-time", m.ExpiryTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *FixedTerm) validateFixedTermDefinition(formats strfmt.Registry) error {

	if err := validate.Required("fixedTermDefinition", "body", m.FixedTermDefinition); err != nil {
		return err
	}

	if m.FixedTermDefinition != nil {

		if err := m.FixedTermDefinition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fixedTermDefinition")
			}
			return err
		}
	}

	return nil
}

func (m *FixedTerm) validateFixedTermDefinitionID(formats strfmt.Registry) error {

	if err := validate.Required("fixedTermDefinitionID", "body", m.FixedTermDefinitionID); err != nil {
		return err
	}

	return nil
}

func (m *FixedTerm) validateFixedTermNumber(formats strfmt.Registry) error {

	if err := validate.Required("fixedTermNumber", "body", m.FixedTermNumber); err != nil {
		return err
	}

	return nil
}

func (m *FixedTerm) validateOrganizationID(formats strfmt.Registry) error {

	if err := validate.Required("organizationID", "body", m.OrganizationID); err != nil {
		return err
	}

	return nil
}

func (m *FixedTerm) validatePeriods(formats strfmt.Registry) error {

	if err := validate.Required("periods", "body", m.Periods); err != nil {
		return err
	}

	return nil
}

func (m *FixedTerm) validateProductRatePlanAsOfTime(formats strfmt.Registry) error {

	if err := validate.Required("productRatePlanAsOfTime", "body", m.ProductRatePlanAsOfTime); err != nil {
		return err
	}

	if err := validate.FormatOf("productRatePlanAsOfTime", "body", "date-time", m.ProductRatePlanAsOfTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *FixedTerm) validateStartTime(formats strfmt.Registry) error {

	if err := validate.Required("startTime", "body", m.StartTime); err != nil {
		return err
	}

	if err := validate.FormatOf("startTime", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

var fixedTermTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NeedsAmendments","Active","Expired"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fixedTermTypeStatePropEnum = append(fixedTermTypeStatePropEnum, v)
	}
}

const (
	// FixedTermStateNeedsAmendments captures enum value "NeedsAmendments"
	FixedTermStateNeedsAmendments string = "NeedsAmendments"
	// FixedTermStateActive captures enum value "Active"
	FixedTermStateActive string = "Active"
	// FixedTermStateExpired captures enum value "Expired"
	FixedTermStateExpired string = "Expired"
)

// prop value enum
func (m *FixedTerm) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, fixedTermTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *FixedTerm) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	// value enum
	if err := m.validateStateEnum("state", "body", *m.State); err != nil {
		return err
	}

	return nil
}

func (m *FixedTerm) validateSubscriptionID(formats strfmt.Registry) error {

	if err := validate.Required("subscriptionID", "body", m.SubscriptionID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FixedTerm) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FixedTerm) UnmarshalBinary(b []byte) error {
	var res FixedTerm
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
