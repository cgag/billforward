package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

/*CreateAccountRequest CreateAccountRequest

swagger:model CreateAccountRequest
*/
type CreateAccountRequest struct {

	/* { "description" : "If present, this will be the product rate plan to use when creating an aggregating subscription.  An account level aggregating subscription will be created when the first subscription is created against the account.", "verbs":[] }
	 */
	AggregatingProductRatePlanID string `json:"aggregatingProductRatePlanID,omitempty"`

	/* { "description" : "The consistent ID of the account level aggregating subscription, if one exists.", "verbs":[] }
	 */
	AggregatingSubscriptionID string `json:"aggregatingSubscriptionID,omitempty"`

	/* metadata
	 */
	Metadata DynamicMetadata `json:"metadata,omitempty"`

	/* { "description" : "Organization associated with the account.", "verbs":[] }
	 */
	OrganizationID string `json:"organizationID,omitempty"`

	/* profile
	 */
	Profile *CreateAccountProfileRequest `json:"profile,omitempty"`

	/* { "description" : "User associated with the account. If this is null, no user is currently assocaited with the account. A user is only set when an account is associated with a user account.", "verbs":[] }
	 */
	UserID string `json:"userID,omitempty"`
}

// Validate validates this create account request
func (m *CreateAccountRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProfile(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateAccountRequest) validateProfile(formats strfmt.Registry) error {

	if swag.IsZero(m.Profile) { // not required
		return nil
	}

	if m.Profile != nil {

		if err := m.Profile.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
