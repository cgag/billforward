// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InsertableBillingEntity Insertable entities are those entities that can be created.
// swagger:model InsertableBillingEntity

type InsertableBillingEntity struct {

	// { "description" : "The UTC DateTime when the pricing-component-value-change was processed.", "verbs":["POST","PUT","GET"] }
	Applied strfmt.DateTime `json:"applied,omitempty"`

	// { "description" : "The UTC DateTime when the pricing-component-value-change was calculated.", "verbs":["POST","PUT","GET"] }
	// Required: true
	AsOf *strfmt.DateTime `json:"asOf"`

	// { "description" : "ID of the user who last updated the entity.", "verbs":[] }
	ChangedBy string `json:"changedBy,omitempty"`

	// { "description" : "The UTC DateTime when the object was created.", "verbs":[] }
	Created strfmt.DateTime `json:"created,omitempty"`

	// { "description" : "ID of the pricing-component-value-change.", "verbs":["POST","PUT","GET"] }
	ID string `json:"id,omitempty"`

	// { "description" : "ID of the invoice associated with the pricing-component-value-change.", "verbs":["POST","PUT","GET"] }
	// Required: true
	InvoiceID *string `json:"invoiceID"`

	// { "description" : "The value change mode.", "verbs":["POST","PUT","GET"] }
	// Required: true
	Mode *string `json:"mode"`

	// { "description" : "The new value of the pricing-component.", "verbs":["POST","PUT","GET"] }
	// Required: true
	NewValue *int32 `json:"newValue"`

	// { "description" : "The new value of the pricing-component.", "verbs":["POST","PUT","GET"] }
	// Required: true
	OldValue *int32 `json:"oldValue"`

	// { "description" : "The organizationID.", "verbs":["POST","PUT","GET"] }
	// Required: true
	OrganizationID *string `json:"organizationID"`

	// { "description" : "ID of the pricing-component associated with the pricing-component-value-change.", "verbs":["POST","PUT","GET"] }
	// Required: true
	PricingComponentID *string `json:"pricingComponentID"`

	// { "description" : "The value change state.", "verbs":["POST","PUT","GET"] }
	// Required: true
	State *string `json:"state"`

	// { "description" : "ID of the subscription associated with the pricing-component-value-change.", "verbs":["POST","PUT","GET"] }
	// Required: true
	SubscriptionID *string `json:"subscriptionID"`

	// { "description" : "ID of the unit-of-measure associated with the pricing-component-value-change.", "verbs":["POST","PUT","GET"] }
	UnitOfMeasureID string `json:"unitOfMeasureID,omitempty"`
}

/* polymorph InsertableBillingEntity applied false */

/* polymorph InsertableBillingEntity asOf false */

/* polymorph InsertableBillingEntity changedBy false */

/* polymorph InsertableBillingEntity created false */

/* polymorph InsertableBillingEntity id false */

/* polymorph InsertableBillingEntity invoiceID false */

/* polymorph InsertableBillingEntity mode false */

/* polymorph InsertableBillingEntity newValue false */

/* polymorph InsertableBillingEntity oldValue false */

/* polymorph InsertableBillingEntity organizationID false */

/* polymorph InsertableBillingEntity pricingComponentID false */

/* polymorph InsertableBillingEntity state false */

/* polymorph InsertableBillingEntity subscriptionID false */

/* polymorph InsertableBillingEntity unitOfMeasureID false */

// Validate validates this insertable billing entity
func (m *InsertableBillingEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAsOf(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateInvoiceID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNewValue(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOldValue(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOrganizationID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePricingComponentID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSubscriptionID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InsertableBillingEntity) validateAsOf(formats strfmt.Registry) error {

	if err := validate.Required("asOf", "body", m.AsOf); err != nil {
		return err
	}

	if err := validate.FormatOf("asOf", "body", "date-time", m.AsOf.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InsertableBillingEntity) validateInvoiceID(formats strfmt.Registry) error {

	if err := validate.Required("invoiceID", "body", m.InvoiceID); err != nil {
		return err
	}

	return nil
}

var insertableBillingEntityTypeModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["immediate","delayed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		insertableBillingEntityTypeModePropEnum = append(insertableBillingEntityTypeModePropEnum, v)
	}
}

const (
	// InsertableBillingEntityModeImmediate captures enum value "immediate"
	InsertableBillingEntityModeImmediate string = "immediate"
	// InsertableBillingEntityModeDelayed captures enum value "delayed"
	InsertableBillingEntityModeDelayed string = "delayed"
)

// prop value enum
func (m *InsertableBillingEntity) validateModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, insertableBillingEntityTypeModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *InsertableBillingEntity) validateMode(formats strfmt.Registry) error {

	if err := validate.Required("mode", "body", m.Mode); err != nil {
		return err
	}

	// value enum
	if err := m.validateModeEnum("mode", "body", *m.Mode); err != nil {
		return err
	}

	return nil
}

func (m *InsertableBillingEntity) validateNewValue(formats strfmt.Registry) error {

	if err := validate.Required("newValue", "body", m.NewValue); err != nil {
		return err
	}

	return nil
}

func (m *InsertableBillingEntity) validateOldValue(formats strfmt.Registry) error {

	if err := validate.Required("oldValue", "body", m.OldValue); err != nil {
		return err
	}

	return nil
}

func (m *InsertableBillingEntity) validateOrganizationID(formats strfmt.Registry) error {

	if err := validate.Required("organizationID", "body", m.OrganizationID); err != nil {
		return err
	}

	return nil
}

func (m *InsertableBillingEntity) validatePricingComponentID(formats strfmt.Registry) error {

	if err := validate.Required("pricingComponentID", "body", m.PricingComponentID); err != nil {
		return err
	}

	return nil
}

var insertableBillingEntityTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["New","Accepted","Rejected","ChargeCreated"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		insertableBillingEntityTypeStatePropEnum = append(insertableBillingEntityTypeStatePropEnum, v)
	}
}

const (
	// InsertableBillingEntityStateNew captures enum value "New"
	InsertableBillingEntityStateNew string = "New"
	// InsertableBillingEntityStateAccepted captures enum value "Accepted"
	InsertableBillingEntityStateAccepted string = "Accepted"
	// InsertableBillingEntityStateRejected captures enum value "Rejected"
	InsertableBillingEntityStateRejected string = "Rejected"
	// InsertableBillingEntityStateChargeCreated captures enum value "ChargeCreated"
	InsertableBillingEntityStateChargeCreated string = "ChargeCreated"
)

// prop value enum
func (m *InsertableBillingEntity) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, insertableBillingEntityTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *InsertableBillingEntity) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	// value enum
	if err := m.validateStateEnum("state", "body", *m.State); err != nil {
		return err
	}

	return nil
}

func (m *InsertableBillingEntity) validateSubscriptionID(formats strfmt.Registry) error {

	if err := validate.Required("subscriptionID", "body", m.SubscriptionID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InsertableBillingEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InsertableBillingEntity) UnmarshalBinary(b []byte) error {
	var res InsertableBillingEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
