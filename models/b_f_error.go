// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BFError Standard BillForward error format.
// swagger:model BFError

type BFError struct {

	// {"description":"Code describing the nature of the error. Currently unused; prefer `errorType`.","verbs":["GET","PUT","POST"]}
	ErrorCode int32 `json:"errorCode,omitempty"`

	// {"description":"Human-readable description of the reason for the error.","verbs":["GET","PUT","POST"]}
	ErrorMessage string `json:"errorMessage,omitempty"`

	// {"description":"List of erroneous parameters found in your input (if applicable).","verbs":["GET","PUT","POST"]}
	ErrorParameters []string `json:"errorParameters"`

	// {"description":"Enum categorizing the nature of the error.","verbs":["GET","PUT","POST"]}
	ErrorType string `json:"errorType,omitempty"`
}

/* polymorph BFError errorCode false */

/* polymorph BFError errorMessage false */

/* polymorph BFError errorParameters false */

/* polymorph BFError errorType false */

// Validate validates this b f error
func (m *BFError) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateErrorParameters(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateErrorType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BFError) validateErrorParameters(formats strfmt.Registry) error {

	if swag.IsZero(m.ErrorParameters) { // not required
		return nil
	}

	return nil
}

var bFErrorTypeErrorTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["BFError","ServerError","ValidationError","UnserializationException","Oauth","PermissionsError","PreconditionFailed","NotImplemented","InvocationError","NoSuchEntity","InconsistentState","StripeOperationFailure","BraintreeOperationFailure","BraintreeValidationError","SagePayOperationFailure","TokenizationAuthCaptureFailure","TokenizationPreAuthFailure","CouponException","CouponUniqueCodesRequestException","CouponUniqueCodesResponseException","RemoveCouponException","AddCouponCodeToSubscriptionRequestException","GatewayAuthenticationError","GatewayAuthorizationError","GatewayResourceNotFoundError","GatewayProtocolVersionError","GatewayInternalError","GatewayDownTemporarilyError","GatewayUnexpectedError","GatewayUnhandledError","GatewaySDKUnhandledError"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		bFErrorTypeErrorTypePropEnum = append(bFErrorTypeErrorTypePropEnum, v)
	}
}

const (
	// BFErrorErrorTypeBFError captures enum value "BFError"
	BFErrorErrorTypeBFError string = "BFError"
	// BFErrorErrorTypeServerError captures enum value "ServerError"
	BFErrorErrorTypeServerError string = "ServerError"
	// BFErrorErrorTypeValidationError captures enum value "ValidationError"
	BFErrorErrorTypeValidationError string = "ValidationError"
	// BFErrorErrorTypeUnserializationException captures enum value "UnserializationException"
	BFErrorErrorTypeUnserializationException string = "UnserializationException"
	// BFErrorErrorTypeOauth captures enum value "Oauth"
	BFErrorErrorTypeOauth string = "Oauth"
	// BFErrorErrorTypePermissionsError captures enum value "PermissionsError"
	BFErrorErrorTypePermissionsError string = "PermissionsError"
	// BFErrorErrorTypePreconditionFailed captures enum value "PreconditionFailed"
	BFErrorErrorTypePreconditionFailed string = "PreconditionFailed"
	// BFErrorErrorTypeNotImplemented captures enum value "NotImplemented"
	BFErrorErrorTypeNotImplemented string = "NotImplemented"
	// BFErrorErrorTypeInvocationError captures enum value "InvocationError"
	BFErrorErrorTypeInvocationError string = "InvocationError"
	// BFErrorErrorTypeNoSuchEntity captures enum value "NoSuchEntity"
	BFErrorErrorTypeNoSuchEntity string = "NoSuchEntity"
	// BFErrorErrorTypeInconsistentState captures enum value "InconsistentState"
	BFErrorErrorTypeInconsistentState string = "InconsistentState"
	// BFErrorErrorTypeStripeOperationFailure captures enum value "StripeOperationFailure"
	BFErrorErrorTypeStripeOperationFailure string = "StripeOperationFailure"
	// BFErrorErrorTypeBraintreeOperationFailure captures enum value "BraintreeOperationFailure"
	BFErrorErrorTypeBraintreeOperationFailure string = "BraintreeOperationFailure"
	// BFErrorErrorTypeBraintreeValidationError captures enum value "BraintreeValidationError"
	BFErrorErrorTypeBraintreeValidationError string = "BraintreeValidationError"
	// BFErrorErrorTypeSagePayOperationFailure captures enum value "SagePayOperationFailure"
	BFErrorErrorTypeSagePayOperationFailure string = "SagePayOperationFailure"
	// BFErrorErrorTypeTokenizationAuthCaptureFailure captures enum value "TokenizationAuthCaptureFailure"
	BFErrorErrorTypeTokenizationAuthCaptureFailure string = "TokenizationAuthCaptureFailure"
	// BFErrorErrorTypeTokenizationPreAuthFailure captures enum value "TokenizationPreAuthFailure"
	BFErrorErrorTypeTokenizationPreAuthFailure string = "TokenizationPreAuthFailure"
	// BFErrorErrorTypeCouponException captures enum value "CouponException"
	BFErrorErrorTypeCouponException string = "CouponException"
	// BFErrorErrorTypeCouponUniqueCodesRequestException captures enum value "CouponUniqueCodesRequestException"
	BFErrorErrorTypeCouponUniqueCodesRequestException string = "CouponUniqueCodesRequestException"
	// BFErrorErrorTypeCouponUniqueCodesResponseException captures enum value "CouponUniqueCodesResponseException"
	BFErrorErrorTypeCouponUniqueCodesResponseException string = "CouponUniqueCodesResponseException"
	// BFErrorErrorTypeRemoveCouponException captures enum value "RemoveCouponException"
	BFErrorErrorTypeRemoveCouponException string = "RemoveCouponException"
	// BFErrorErrorTypeAddCouponCodeToSubscriptionRequestException captures enum value "AddCouponCodeToSubscriptionRequestException"
	BFErrorErrorTypeAddCouponCodeToSubscriptionRequestException string = "AddCouponCodeToSubscriptionRequestException"
	// BFErrorErrorTypeGatewayAuthenticationError captures enum value "GatewayAuthenticationError"
	BFErrorErrorTypeGatewayAuthenticationError string = "GatewayAuthenticationError"
	// BFErrorErrorTypeGatewayAuthorizationError captures enum value "GatewayAuthorizationError"
	BFErrorErrorTypeGatewayAuthorizationError string = "GatewayAuthorizationError"
	// BFErrorErrorTypeGatewayResourceNotFoundError captures enum value "GatewayResourceNotFoundError"
	BFErrorErrorTypeGatewayResourceNotFoundError string = "GatewayResourceNotFoundError"
	// BFErrorErrorTypeGatewayProtocolVersionError captures enum value "GatewayProtocolVersionError"
	BFErrorErrorTypeGatewayProtocolVersionError string = "GatewayProtocolVersionError"
	// BFErrorErrorTypeGatewayInternalError captures enum value "GatewayInternalError"
	BFErrorErrorTypeGatewayInternalError string = "GatewayInternalError"
	// BFErrorErrorTypeGatewayDownTemporarilyError captures enum value "GatewayDownTemporarilyError"
	BFErrorErrorTypeGatewayDownTemporarilyError string = "GatewayDownTemporarilyError"
	// BFErrorErrorTypeGatewayUnexpectedError captures enum value "GatewayUnexpectedError"
	BFErrorErrorTypeGatewayUnexpectedError string = "GatewayUnexpectedError"
	// BFErrorErrorTypeGatewayUnhandledError captures enum value "GatewayUnhandledError"
	BFErrorErrorTypeGatewayUnhandledError string = "GatewayUnhandledError"
	// BFErrorErrorTypeGatewaySDKUnhandledError captures enum value "GatewaySDKUnhandledError"
	BFErrorErrorTypeGatewaySDKUnhandledError string = "GatewaySDKUnhandledError"
)

// prop value enum
func (m *BFError) validateErrorTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, bFErrorTypeErrorTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BFError) validateErrorType(formats strfmt.Registry) error {

	if swag.IsZero(m.ErrorType) { // not required
		return nil
	}

	// value enum
	if err := m.validateErrorTypeEnum("errorType", "body", m.ErrorType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BFError) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BFError) UnmarshalBinary(b []byte) error {
	var res BFError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
