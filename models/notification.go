package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*Notification Notification

swagger:model Notification
*/
type Notification struct {

	/* { "description" : "If true notifications will continue to be sent until an acknowledgment is received.", "verbs":["POST","PUT","GET"] }

	Required: true
	*/
	AckEnabled bool `json:"ackEnabled"`

	/* { "description" : "The UTC DateTime when the notification was acked if it is ack enabled.", "verbs":["POST","PUT","GET"] }
	 */
	Acked strfmt.DateTime `json:"acked,omitempty"`

	/* { "description" : "The action associated with the notification.", "verbs":["POST","PUT","GET"] }

	Required: true
	*/
	Action *string `json:"action"`

	/* { "description" : "ID of the user who last updated the entity.", "verbs":[] }
	 */
	ChangedBy string `json:"changedBy,omitempty"`

	/* changes
	 */
	Changes []strfmt.Base64 `json:"changes,omitempty"`

	/* { "description" : "The UTC DateTime when the object was created.", "verbs":[] }
	 */
	Created strfmt.DateTime `json:"created,omitempty"`

	/* { "description" : "The URL the notification will be sent to.", "verbs":["POST","PUT","GET"] }

	Required: true
	*/
	DestinationURL *string `json:"destinationURL"`

	/* { "description" : "The domain of the notification.", "verbs":["POST","PUT","GET"] }

	Required: true
	*/
	Domain *string `json:"domain"`

	/* entity
	 */
	Entity []strfmt.Base64 `json:"entity,omitempty"`

	/* { "description" : "The id of the entity associated with the notification.", "verbs":["POST","PUT","GET"] }

	Required: true
	*/
	EntityID *string `json:"entityID"`

	/* { "description" : "The UTC DateTime of the notification's final send attempt.", "verbs":["POST","PUT","GET"] }
	 */
	FinalSendAttempt strfmt.DateTime `json:"finalSendAttempt,omitempty"`

	/* { "description" : "Format of the notification.", "verbs":["POST","PUT","GET"] }

	Required: true
	*/
	Format *string `json:"format"`

	/* { "description" : "ID of the notification.", "verbs":["POST","PUT","GET"] }
	 */
	ID string `json:"id,omitempty"`

	/* { "description" : "The UTC DateTime of the notifications's last send attempt.", "verbs":["POST","PUT","GET"] }
	 */
	LastSendAttempt strfmt.DateTime `json:"lastSendAttempt,omitempty"`

	/* { "description" : "The UTC DateTime of the notification's next send attempt.", "verbs":["POST","PUT","GET"] }
	 */
	NextSendAttempt strfmt.DateTime `json:"nextSendAttempt,omitempty"`

	/* { "description" : "Organization associated with the notification.", "verbs":["POST","PUT","GET"] }

	Required: true
	*/
	OrganizationID *string `json:"organizationID"`

	/* { "description" : "Whether the notification has been sent.", "verbs":["POST","PUT","GET"] }

	Required: true
	*/
	State *string `json:"state"`

	/* { "description" : "The number of send attempts for this notification.", "verbs":["POST","PUT","GET"] }
	 */
	TotalSendAttempts int32 `json:"totalSendAttempts,omitempty"`

	/* { "description" : "The UTC DateTime when the object was last updated.", "verbs":[] }
	 */
	Updated strfmt.DateTime `json:"updated,omitempty"`

	/* { "description" : "Webhook associated with the notification.", "verbs":["POST","PUT","GET"] }

	Required: true
	*/
	WebhookID *string `json:"webhookID"`
}

// Validate validates this notification
func (m *Notification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAckEnabled(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateAction(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateChanges(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDestinationURL(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDomain(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEntity(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEntityID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFormat(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOrganizationID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateWebhookID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Notification) validateAckEnabled(formats strfmt.Registry) error {

	if err := validate.Required("ackEnabled", "body", bool(m.AckEnabled)); err != nil {
		return err
	}

	return nil
}

var notificationTypeActionPropEnum []interface{}

// prop value enum
func (m *Notification) validateActionEnum(path, location string, value string) error {
	if notificationTypeActionPropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["Accept","Active","AwaitingPayment","AwaitingRefund","Cancelled","Completed","Created","Error","Expiring","Expired","Failed","Migrated","NeedsAmendments","Paid","Pending","Provisioned","Refunded","Reject","Trial","Unknown","Unpaid","Updated","Voided","PaymentFailed"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			notificationTypeActionPropEnum = append(notificationTypeActionPropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, notificationTypeActionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Notification) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("action", "body", m.Action); err != nil {
		return err
	}

	// value enum
	if err := m.validateActionEnum("action", "body", *m.Action); err != nil {
		return err
	}

	return nil
}

func (m *Notification) validateChanges(formats strfmt.Registry) error {

	if swag.IsZero(m.Changes) { // not required
		return nil
	}

	return nil
}

func (m *Notification) validateDestinationURL(formats strfmt.Registry) error {

	if err := validate.Required("destinationURL", "body", m.DestinationURL); err != nil {
		return err
	}

	return nil
}

var notificationTypeDomainPropEnum []interface{}

// prop value enum
func (m *Notification) validateDomainEnum(path, location string, value string) error {
	if notificationTypeDomainPropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["Notification","Organization","OrganizationGateway","Product","User","Subscription","Profile","ProductRatePlan","Client","Invoice","PricingComponentValue","Account","PricingComponentValueChange","PricingComponentTier","PricingComponent","PricingCalculation","Coupon","CouponDiscount","CouponDefinition","CouponInstance","CouponModifier","CouponRule","CouponBookDefinition","CouponBook","InvoiceLine","Webhook","WebhookSubscription","SubscriptionCancellation","NotificationSnapshot","InvoicePayment","Payment","PaymentMethod","PaymentMethodSubscriptionLink","DunningLine","CybersourceToken","Card","Alias","PaypalSimplePaymentReconciliation","FreePaymentReconciliation","LocustworldPaymentReconciliation","CouponInstanceExistingValue","TaxLine","TaxationStrategy","TaxationLink","Address","AmendmentPriceNTime","Authority","UnitOfMeasure","SearchResult","Amendment","AuditLog","Password","Username","FixedTermDefinition","FixedTerm","Refund","CreditNote","Receipt","AmendmentCompoundConstituent","APIConfiguration","StripeToken","BraintreeToken","BalancedToken","AuthorizeNetToken","PaypalToken","SpreedlyToken","SagePayToken","TrustCommerceToken","PayVisionToken","SagePayOutstandingTransaction","SagePayEnabledCardType","SagePayTransaction","GatewayRevenue","Migration","AdhocSubscription","SubscriptionCharge","ComponentChange","Verification","UsageRoundingStrategies","PricingComponentValueMigrationChargeAmendmentMapping","AmendmentDiscardAmendment","EntityTime","AggregatingComponent","PricingComponentMigrationValue","MetadataKeyValue","Metadata","AggregationLink","BFPermission","Role","PermissionLink","PayVisionTransaction","KashToken","DataSynchronizationJob","DataSynchronizationJobError","DataSynchronizationConfiguration","DataSynchronizationAppConfiguration","AggregationChildrenResponse","InvoiceLinePayment","EmailSubscription","EmailProvider","TimeResponse","Email","RevenueAttribution","Unknown"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			notificationTypeDomainPropEnum = append(notificationTypeDomainPropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, notificationTypeDomainPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Notification) validateDomain(formats strfmt.Registry) error {

	if err := validate.Required("domain", "body", m.Domain); err != nil {
		return err
	}

	// value enum
	if err := m.validateDomainEnum("domain", "body", *m.Domain); err != nil {
		return err
	}

	return nil
}

func (m *Notification) validateEntity(formats strfmt.Registry) error {

	if swag.IsZero(m.Entity) { // not required
		return nil
	}

	return nil
}

func (m *Notification) validateEntityID(formats strfmt.Registry) error {

	if err := validate.Required("entityID", "body", m.EntityID); err != nil {
		return err
	}

	return nil
}

var notificationTypeFormatPropEnum []interface{}

// prop value enum
func (m *Notification) validateFormatEnum(path, location string, value string) error {
	if notificationTypeFormatPropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["JSON","XML"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			notificationTypeFormatPropEnum = append(notificationTypeFormatPropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, notificationTypeFormatPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Notification) validateFormat(formats strfmt.Registry) error {

	if err := validate.Required("format", "body", m.Format); err != nil {
		return err
	}

	// value enum
	if err := m.validateFormatEnum("format", "body", *m.Format); err != nil {
		return err
	}

	return nil
}

func (m *Notification) validateOrganizationID(formats strfmt.Registry) error {

	if err := validate.Required("organizationID", "body", m.OrganizationID); err != nil {
		return err
	}

	return nil
}

var notificationTypeStatePropEnum []interface{}

// prop value enum
func (m *Notification) validateStateEnum(path, location string, value string) error {
	if notificationTypeStatePropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["Unsent","Sending","Sent"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			notificationTypeStatePropEnum = append(notificationTypeStatePropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, notificationTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Notification) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	// value enum
	if err := m.validateStateEnum("state", "body", *m.State); err != nil {
		return err
	}

	return nil
}

func (m *Notification) validateWebhookID(formats strfmt.Registry) error {

	if err := validate.Required("webhookID", "body", m.WebhookID); err != nil {
		return err
	}

	return nil
}
