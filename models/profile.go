// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Profile Profile
// swagger:model Profile

type Profile struct {

	// { "description" : "", "verbs":["GET"] }
	// Required: true
	AccountID *string `json:"accountID"`

	// { "description" : "Any additional information", "verbs":["POST","PUT","GET"] }
	AdditionalInformation string `json:"additionalInformation,omitempty"`

	// { "description" : "Address associated with the profile", "verbs":["POST","PUT","GET"] }
	Addresses []*Address `json:"addresses"`

	// { "description" : "ID of the user who last updated the entity.", "verbs":[] }
	ChangedBy string `json:"changedBy,omitempty"`

	// { "description" : "", "verbs":["POST","PUT","GET"] }
	CompanyName string `json:"companyName,omitempty"`

	// { "description" : "The UTC DateTime when the object was created.", "verbs":[] }
	Created strfmt.DateTime `json:"created,omitempty"`

	// { "description" : "Date of birth in YYYY-MM-DD format", "verbs":["POST","PUT","GET"] }
	Dob strfmt.DateTime `json:"dob,omitempty"`

	// { "description" : "E-mail address", "verbs":["POST","PUT","GET"] }
	// Required: true
	Email *string `json:"email"`

	// { "description" : "Fax number", "verbs":["POST","PUT","GET"] }
	Fax string `json:"fax,omitempty"`

	// { "description" : "", "verbs":["POST","PUT","GET"] }
	// Required: true
	FirstName *string `json:"firstName"`

	// { "description" : "ID of the profile.", "verbs":["PUT","GET"] }
	// Required: true
	ID *string `json:"id"`

	// { "description" : "Home telephone number", "verbs":["POST","PUT","GET"] }
	Landline string `json:"landline,omitempty"`

	// { "description" : "", "verbs":["POST","PUT","GET"] }
	// Required: true
	LastName *string `json:"lastName"`

	// { "description" : "", "verbs":["POST","PUT","GET"] }
	LogoURL string `json:"logoURL,omitempty"`

	// { "description" : "Mobile telephone number", "verbs":["POST","PUT","GET"] }
	Mobile string `json:"mobile,omitempty"`

	// { "description" : "", "verbs":[] }
	// Required: true
	OrganizationID *string `json:"organizationID"`

	// { "description" : "The UTC DateTime when the object was last updated.", "verbs":[] }
	Updated strfmt.DateTime `json:"updated,omitempty"`

	// { "description" : "VAT number", "verbs":["POST","PUT","GET"] }
	VatNumber string `json:"vatNumber,omitempty"`
}

/* polymorph Profile accountID false */

/* polymorph Profile additionalInformation false */

/* polymorph Profile addresses false */

/* polymorph Profile changedBy false */

/* polymorph Profile companyName false */

/* polymorph Profile created false */

/* polymorph Profile dob false */

/* polymorph Profile email false */

/* polymorph Profile fax false */

/* polymorph Profile firstName false */

/* polymorph Profile id false */

/* polymorph Profile landline false */

/* polymorph Profile lastName false */

/* polymorph Profile logoURL false */

/* polymorph Profile mobile false */

/* polymorph Profile organizationID false */

/* polymorph Profile updated false */

/* polymorph Profile vatNumber false */

// Validate validates this profile
func (m *Profile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateAddresses(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFirstName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLastName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOrganizationID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Profile) validateAccountID(formats strfmt.Registry) error {

	if err := validate.Required("accountID", "body", m.AccountID); err != nil {
		return err
	}

	return nil
}

func (m *Profile) validateAddresses(formats strfmt.Registry) error {

	if swag.IsZero(m.Addresses) { // not required
		return nil
	}

	for i := 0; i < len(m.Addresses); i++ {

		if swag.IsZero(m.Addresses[i]) { // not required
			continue
		}

		if m.Addresses[i] != nil {

			if err := m.Addresses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("addresses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Profile) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	return nil
}

func (m *Profile) validateFirstName(formats strfmt.Registry) error {

	if err := validate.Required("firstName", "body", m.FirstName); err != nil {
		return err
	}

	return nil
}

func (m *Profile) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Profile) validateLastName(formats strfmt.Registry) error {

	if err := validate.Required("lastName", "body", m.LastName); err != nil {
		return err
	}

	return nil
}

func (m *Profile) validateOrganizationID(formats strfmt.Registry) error {

	if err := validate.Required("organizationID", "body", m.OrganizationID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Profile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Profile) UnmarshalBinary(b []byte) error {
	var res Profile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
